# Main Logstash pipeline for general log processing
input {
  beats {
    port => 5044
    type => "filebeat"
  }
  
  tcp {
    port => 5000
    type => "tcp"
  }
  
  http {
    port => 8080
    type => "http"
  }
}

filter {
  # Add timestamp
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "json_data"
    }
  }
  
  # Add common fields
  mutate {
    add_field => {
      "environment" => "production"
      "project" => "n8n-ai-starter-kit"
      "version" => "1.2.0"
    }
  }
  
  # GeoIP for access logs
  if [fields][log_type] == "access" and [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Parse log levels
  if [message] =~ /(?i)(error|err)/ {
    mutate { add_field => { "log_level" => "ERROR" } }
  } else if [message] =~ /(?i)(warn|warning)/ {
    mutate { add_field => { "log_level" => "WARN" } }
  } else if [message] =~ /(?i)(info|information)/ {
    mutate { add_field => { "log_level" => "INFO" } }
  } else if [message] =~ /(?i)debug/ {
    mutate { add_field => { "log_level" => "DEBUG" } }
  } else {
    mutate { add_field => { "log_level" => "UNKNOWN" } }
  }
  
  # Clean up
  if [json_data] {
    ruby {
      code => "
        json_data = event.get('json_data')
        if json_data.is_a?(Hash)
          json_data.each { |k, v| event.set(k, v) }
        end
        event.remove('json_data')
      "
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logstash-general-%{+YYYY.MM.dd}"
    template_name => "logstash-general"
    template_pattern => "logstash-general-*"
    template => {
      "index_patterns" => ["logstash-general-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "30s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "message" => { "type" => "text", "analyzer" => "standard" }
          "log_level" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "project" => { "type" => "keyword" }
          "version" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Debug output for development
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
}
