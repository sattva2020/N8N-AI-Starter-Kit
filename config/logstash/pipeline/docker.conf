# Docker container logs processing pipeline
input {
  beats {
    port => 5046
    type => "docker"
  }
}

filter {
  # Parse Docker container logs
  if [fields][log_type] == "docker" {
    # Extract container information
    if [docker][container][name] {
      mutate {
        add_field => { "container_name" => "%{[docker][container][name]}" }
        add_field => { "container_id" => "%{[docker][container][id]}" }
        add_field => { "container_image" => "%{[docker][container][image]}" }
      }
    }
    
    # Parse different service logs based on container name
    if [container_name] =~ /n8n/ {
      mutate {
        add_field => { "service" => "n8n" }
        add_field => { "service_type" => "workflow_automation" }
      }
    } else if [container_name] =~ /ollama/ {
      mutate {
        add_field => { "service" => "ollama" }
        add_field => { "service_type" => "llm_service" }
      }
    } else if [container_name] =~ /qdrant/ {
      mutate {
        add_field => { "service" => "qdrant" }
        add_field => { "service_type" => "vector_database" }
      }
    } else if [container_name] =~ /postgres/ {
      mutate {
        add_field => { "service" => "postgresql" }
        add_field => { "service_type" => "database" }
      }
    } else if [container_name] =~ /graphiti/ {
      mutate {
        add_field => { "service" => "graphiti" }
        add_field => { "service_type" => "knowledge_graph" }
      }
    } else if [container_name] =~ /nginx|traefik/ {
      mutate {
        add_field => { "service" => "reverse_proxy" }
        add_field => { "service_type" => "infrastructure" }
      }
    } else {
      mutate {
        add_field => { "service" => "unknown" }
        add_field => { "service_type" => "unknown" }
      }
    }
    
    # Parse log levels from Docker logs
    if [message] =~ /(?i)\[(error|err)\]/ or [message] =~ /(?i)error:/ {
      mutate { add_field => { "log_level" => "ERROR" } }
    } else if [message] =~ /(?i)\[(warn|warning)\]/ or [message] =~ /(?i)warn:/ {
      mutate { add_field => { "log_level" => "WARN" } }
    } else if [message] =~ /(?i)\[info\]/ or [message] =~ /(?i)info:/ {
      mutate { add_field => { "log_level" => "INFO" } }
    } else if [message] =~ /(?i)\[debug\]/ or [message] =~ /(?i)debug:/ {
      mutate { add_field => { "log_level" => "DEBUG" } }
    } else {
      mutate { add_field => { "log_level" => "INFO" } }
    }
    
    # Parse HTTP access logs (for reverse proxy)
    if [service] == "reverse_proxy" and [message] =~ /\d+\.\d+\.\d+\.\d+/ {
      grok {
        match => { 
          "message" => "%{IPORHOST:client_ip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{URIPATH:request_path}(?:%{URIPARAM:request_params})? HTTP/%{NUMBER:http_version}\" %{NUMBER:http_status:int} %{NUMBER:response_size:int} \"?%{DATA:http_referer}\"? \"?%{DATA:user_agent}\"?" 
        }
      }
      
      mutate {
        add_field => { "log_type" => "access_log" }
      }
      
      # Categorize HTTP status codes
      if [http_status] >= 500 {
        mutate { add_field => { "http_status_category" => "server_error" } }
      } else if [http_status] >= 400 {
        mutate { add_field => { "http_status_category" => "client_error" } }
      } else if [http_status] >= 300 {
        mutate { add_field => { "http_status_category" => "redirect" } }
      } else if [http_status] >= 200 {
        mutate { add_field => { "http_status_category" => "success" } }
      } else {
        mutate { add_field => { "http_status_category" => "unknown" } }
      }
    }
    
    # Add Docker specific fields
    mutate {
      add_field => {
        "log_source" => "docker"
        "environment" => "production"
        "project" => "n8n-ai-starter-kit"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "docker-logs-%{+YYYY.MM.dd}"
    template_name => "docker-logs"
    template_pattern => "docker-logs-*"
    template => {
      "index_patterns" => ["docker-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "30s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "message" => { "type" => "text", "analyzer" => "standard" }
          "container_name" => { "type" => "keyword" }
          "container_id" => { "type" => "keyword" }
          "container_image" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "service_type" => { "type" => "keyword" }
          "log_level" => { "type" => "keyword" }
          "log_type" => { "type" => "keyword" }
          "log_source" => { "type" => "keyword" }
          "client_ip" => { "type" => "ip" }
          "http_method" => { "type" => "keyword" }
          "request_path" => { "type" => "keyword" }
          "http_status" => { "type" => "integer" }
          "http_status_category" => { "type" => "keyword" }
          "response_size" => { "type" => "integer" }
          "user_agent" => { "type" => "text" }
          "http_referer" => { "type" => "text" }
          "environment" => { "type" => "keyword" }
          "project" => { "type" => "keyword" }
        }
      }
    }
  }
}
