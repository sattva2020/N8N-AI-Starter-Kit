#!/usr/bin/env python3
"""
Test script –¥–ª—è N8N Workflows Auto-Importer v1.2.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π workflows
"""

import os
import sys
import json
import tempfile
import importlib.util
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é –∏–º–ø–æ—Ä—Ç–∞
import_path = str(Path(__file__).parent.parent / "services" / "n8n-importer")
sys.path.insert(0, import_path)

def create_test_workflow(name: str, active: bool = True) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ workflow"""
    return {
        "name": name,
        "active": active,
        "nodes": [
            {
                "id": "1",
                "name": "Start",
                "type": "n8n-nodes-base.start",
                "typeVersion": 1,
                "position": [100, 100],
                "parameters": {}
            }
        ],
        "connections": {},
        "createdAt": "2024-01-20T12:00:00.000Z",
        "updatedAt": "2024-01-20T12:00:00.000Z",
        "versionId": "1"
    }

def test_workflow_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflows"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflows...")
    
    workflows_dir = Path("n8n/workflows")
    if not workflows_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    required_dirs = ["production", "testing", "examples"]
    for dir_name in required_dirs:
        dir_path = workflows_dir / dir_name
        if not dir_path.exists():
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
            return False
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ workflows –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_import_priority():
    """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_workflows = Path(temp_dir) / "workflows"
        temp_workflows.mkdir()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        for subdir in ["production", "testing", "examples"]:
            (temp_workflows / subdir).mkdir()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_files = [
            ("production/test-prod.json", create_test_workflow("Production Test")),
            ("testing/quick-rag-test.json", create_test_workflow("Quick RAG Test")),
            ("testing/advanced-rag-pipeline-test.json", create_test_workflow("Advanced RAG Test")),
            ("examples/test-example.json", create_test_workflow("Example Test")),
            ("root-workflow.json", create_test_workflow("Root Test"))
        ]
        
        for file_path, workflow_data in test_files:
            full_path = temp_workflows / file_path
            with open(full_path, 'w', encoding='utf-8') as f:
                json.dump(workflow_data, f, indent=2)        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å–∞
        try:
            workflow_files = list(temp_workflows.rglob("*.json"))
            
            def get_priority(file_path):
                """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ (–∫–æ–ø–∏—è –∏–∑ import-workflows.py)"""
                parent_dir = file_path.parent.name
                file_name = file_path.stem
                
                folder_priority = {
                    'production': 1,
                    'testing': 2, 
                    'examples': 3
                }.get(parent_dir, 4)
                
                name_priority = 0
                if 'quick-rag-test' in file_name:
                    name_priority = 1
                elif 'advanced-rag-pipeline-test' in file_name:
                    name_priority = 2
                elif 'advanced-rag-automation' in file_name:
                    name_priority = 3
                else:
                    name_priority = 9
                    
                return (folder_priority, name_priority)
            
            sorted_files = sorted(workflow_files, key=get_priority)
            
            print("üìã –ü–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ (—Ç–µ—Å—Ç):")
            for i, file in enumerate(sorted_files, 1):
                relative_path = file.relative_to(temp_workflows)
                print(f"  {i}. {relative_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ production —Ñ–∞–π–ª—ã –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
            first_file = sorted_files[0].relative_to(temp_workflows)
            if "production" in str(first_file):
                print("‚úÖ Production —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
                return True
            else:
                print("‚ùå Production —Ñ–∞–π–ª—ã –Ω–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏: {e}")
            return False

def test_json_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Ñ–∞–π–ª–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON...")
    
    workflows_dir = Path("n8n/workflows")
    json_files = list(workflows_dir.rglob("*.json"))
    
    if not json_files:
        print("‚ö†Ô∏è –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return True
    
    valid_count = 0
    invalid_count = 0
    
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è workflow
            if 'name' in data or 'nodes' in data:
                valid_count += 1
                print(f"‚úÖ {json_file.relative_to(workflows_dir)}")
            else:
                invalid_count += 1
                print(f"‚ö†Ô∏è {json_file.relative_to(workflows_dir)} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                
        except json.JSONDecodeError as e:
            invalid_count += 1
            print(f"‚ùå {json_file.relative_to(workflows_dir)} - –æ—à–∏–±–∫–∞ JSON: {e}")
        except Exception as e:
            invalid_count += 1
            print(f"‚ùå {json_file.relative_to(workflows_dir)} - –æ—à–∏–±–∫–∞: {e}")
    
    print(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {valid_count}, —Å –æ—à–∏–±–∫–∞–º–∏: {invalid_count}")
    return invalid_count == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ N8N Workflows Auto-Importer - Test Suite v1.2.0")
    print("=" * 60)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ workflows", test_workflow_structure),
        ("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞", test_import_priority),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è JSON", test_json_validation)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüî¨ {test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                failed += 1
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
