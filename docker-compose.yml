version: "3.8"

volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  supabase_data:
  supabase_db:
  minio_data:
  pgadmin_data:
  traefik_letsencrypt:
  jupyter_data:

# Определяем сети, которые будут использоваться во всех файлах композиции
# Важно отметить, что импортируемые файлы должны использовать эти сети как внешние
networks:
  frontend:
    external: false
    name: frontend-network
  backend:
    external: false
    name: backend-network
  database:
    external: false
    name: database-network

# Общие конфигурации сервисов
x-service-defaults: &service-defaults
  restart: unless-stopped
  networks:
    - backend

x-n8n: &service-n8n
  image: n8nio/n8n:1.15.1 # Последняя стабильная версия на май 2025
  <<: *service-defaults
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_DISABLED=false
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - N8N_METRICS=true
    - NODE_ENV=production
    - N8N_DEFAULT_BINARY_DATA_MODE=${N8N_DEFAULT_BINARY_DATA_MODE}
    # Для использования LangChain через n8n
    - N8N_AI_ENABLED=true
  depends_on:
    postgres:
      condition: service_healthy
  volumes:
    - n8n_storage:/home/node/.n8n
  networks:
    - frontend
    - backend
    - database

x-ollama: &service-ollama
  image: ollama/ollama:0.1.29 # Стабильная версия на май 2025
  restart: unless-stopped
  volumes:
    - ollama_storage:/root/.ollama
  networks:
    - frontend
    - backend
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 10s

x-init-ollama: &init-ollama
  image: ollama/ollama:0.1.29 # Соответствует основной версии Ollama
  entrypoint: ["/bin/sh", "-c"]
  command:
    - |
      sleep 5; # Даем Ollama немного времени для запуска
      retry=0;
      max_retries=10;
      echo "Проверка готовности Ollama сервера...";
      while ! curl -s http://$$OLLAMA_HOST:11434/api/tags >/dev/null && [ $$retry -lt $$max_retries ]; do
        echo "Ожидание Ollama сервера, попытка $$(( retry + 1 ))/$$max_retries...";
        sleep 3;
        retry=$$((retry+1));
      done;
      if [ $$retry -eq $$max_retries ]; then
        echo "Ollama сервер не запустился после $$max_retries попыток. Выход.";
        exit 1;
      fi;
      echo "Ollama сервер готов!";
      echo "Загрузка модели llama3...";
      ollama pull llama3;
      echo "Загрузка модели завершена!";
  volumes:
    - ./config/ollama-models.txt:/tmp/models.txt
  depends_on:
    ollama:
      condition: service_healthy

services:
  traefik:
    image: traefik:v2.10.4 # Последняя стабильная версия на май 2025
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.myresolver.acme.tlsChallenge=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./config/traefik:/etc/traefik/dynamic
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USERNAME}:${TRAEFIK_PASSWORD_HASHED}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  n8n:
    <<: *service-n8n
    profiles: [default, cpu, minimal, developer]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  postgres:
    image: postgres:16.1-alpine # Фиксированная стабильная версия
    restart: unless-stopped
    profiles: [default, cpu, minimal, developer]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  pgadmin:
    image: dpage/pgadmin4:7.8 # Фиксированная версия
    restart: unless-stopped
    profiles: [developer]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - frontend
      - database
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_DOMAIN}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  minio:
    image: minio/minio:RELEASE.2025-03-01T02-19-20Z # Фиксированная версия
    restart: unless-stopped
    profiles: [default, cpu, developer]
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      # S3 API service
      - "traefik.http.routers.minio-api.rule=Host(`${MINIO_API_DOMAIN}`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.tls.certresolver=myresolver"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      # Console service
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_DOMAIN}`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.tls.certresolver=myresolver"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

  qdrant:
    image: qdrant/qdrant:v1.5.1 # Фиксированная версия
    restart: unless-stopped
    profiles: [default, cpu, developer]
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - backend
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`${QDRANT_DOMAIN}`)"
      - "traefik.http.routers.qdrant.entrypoints=websecure"
      - "traefik.http.routers.qdrant.tls.certresolver=myresolver"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  ollama:
    <<: *service-ollama
    profiles: [default, cpu, minimal]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama.rule=Host(`${OLLAMA_DOMAIN}`)"
      - "traefik.http.routers.ollama.entrypoints=websecure"
      - "traefik.http.routers.ollama.tls.certresolver=myresolver"
      - "traefik.http.services.ollama.loadbalancer.server.port=11434"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  ollama-pull:
    profiles: [default, cpu, minimal]
    <<: *init-ollama
    environment:
      - OLLAMA_HOST=ollama
    depends_on:
      ollama:
        condition: service_healthy
    labels:
      - "traefik.enable=false"

  jupyterlab:
    image: jupyter/minimal-notebook:lab-4.0.7 # Фиксированная версия
    restart: unless-stopped
    profiles: [developer]
    volumes:
      - jupyter_data:/home/jovyan/work
    networks:
      - frontend
      - backend
    environment:
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:-}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`${JUPYTER_DOMAIN}`)"
      - "traefik.http.routers.jupyter.entrypoints=websecure"
      - "traefik.http.routers.jupyter.tls.certresolver=myresolver"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

include:
  - path: ./compose/zep-compose.yaml
  - path: ./compose/supabase-compose.yml
  - path: ./compose/optional-services.yml
