{
  "name": "IZ_SUPER_AI_AGENT_MESSAGE",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1560,
        1240
      ],
      "id": "333fa735-121e-4b45-a799-991a1a28caf5",
      "name": "When chat message received",
      "webhookId": "bdab170e-cc47-4357-92b9-4dfbf08fe392"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "={{ $json.prompt }}\n\nTodays date: {{ $today.format('yyyy-MM-dd') }}\n\n\nImportant:\n\n- Ensure you always call tools to get the latest information.\n- If details are provided, create without questions.\n- If you are confused, use the \"Think\" tool before proceeding.\n- When creating new tasks, expenses or bills, format them professionally."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        800,
        1220
      ],
      "id": "1b197ae2-6d53-4063-a659-a554a83e2ad8",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -100,
        2320
      ],
      "id": "ddf9ca45-c588-4930-8f52-5a6a90c6eda8",
      "name": "Think"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You perform web searches. Use the available tool to search the web.\\n\\nPresent each search result with the following details:\\nTitle: [Result Title]\\nSnippet: [Result Snippet]\\nPublish Date: [Result Publish Date]\\nURL: [Result URL]\",\n  \"memory\": \"search\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -220,
        300
      ],
      "id": "5d8f99c2-1ad6-4feb-9357-4d3767827fe5",
      "name": "Search Web Prompt"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {
          "responseFormat": "text"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1120,
        1620
      ],
      "id": "3fbd9e5c-6336-498c-849c-d3629945c4dc",
      "name": "4.1-nano",
      "credentials": {
        "openAiApi": {
          "id": "XLvdxNcexKfUmGhl",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to create an event",
        "calendar": {
          "__rl": true,
          "value": "63129f7f8a0ccde6960f48886dee716ef604d631a25f08205d6c7ba391ca4734@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Тестовый Календарь"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1200,
        2320
      ],
      "id": "1da578e7-d77e-4ece-9a12-769dc031a591",
      "name": "Create Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "FmfdXK755Qes1QHO",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to get an event",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "63129f7f8a0ccde6960f48886dee716ef604d631a25f08205d6c7ba391ca4734@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Тестовый Календарь"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', ``, 'string') }}",
        "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
        "options": {
          "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1340,
        2320
      ],
      "id": "1c77b3cb-a491-474e-bc21-8d1063cbb29a",
      "name": "Get Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "FmfdXK755Qes1QHO",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "63129f7f8a0ccde6960f48886dee716ef604d631a25f08205d6c7ba391ca4734@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Тестовый Календарь"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1480,
        2320
      ],
      "id": "9a1d5248-5def-4f8d-b0fc-29c22a76bca8",
      "name": "Update Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "FmfdXK755Qes1QHO",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "63129f7f8a0ccde6960f48886dee716ef604d631a25f08205d6c7ba391ca4734@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Тестовый Календарь"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1620,
        2320
      ],
      "id": "4f55b0e8-dd25-433e-a43a-443d373f519a",
      "name": "Delete Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "FmfdXK755Qes1QHO",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "resource": "all",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', ``, 'number') }}",
        "additionalFields": {
          "keyword": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Keyword', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.hackerNewsTool",
      "typeVersion": 1,
      "position": [
        1800,
        2320
      ],
      "id": "3a641ace-d0da-4152-8585-11c424e96d42",
      "name": "Hacker News"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to access Reddit",
        "operation": "search",
        "subreddit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subreddit', ``, 'string') }}",
        "keyword": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Keyword', ``, 'string') }}",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', ``, 'number') }}",
        "additionalFields": {
          "sort": "hot"
        }
      },
      "type": "n8n-nodes-base.redditTool",
      "typeVersion": 1,
      "position": [
        1940,
        2320
      ],
      "id": "86ce783d-e6a9-4744-9068-864a7b6d2d4c",
      "name": "Reddit",
      "credentials": {
        "redditOAuth2Api": {
          "id": "VunGR4GJJpCi9nbb",
          "name": "Reddit account"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You manage calendar events. Use the available tools to create events, get events, update events, and delete events.\",\n  \"memory\": \"calendar\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        580
      ],
      "id": "4d91c08b-1051-41f0-8a6c-8d69c5e4220c",
      "name": "Calendar Prompt"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You fetch Hacker News articles. Use the available tool to get articles.\",\n  \"memory\": \"hacker_news\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -380,
        700
      ],
      "id": "30083df9-c760-4c60-895a-57d9b8ed5398",
      "name": "HackerNews Prompt"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You retrieve Reddit posts. Use the available tool to retrieve posts. Ensure you always use keywords when searching, too.\",\n  \"memory\": \"reddit\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        700
      ],
      "id": "dd49ac4e-08cb-4693-a620-d252f69b0f36",
      "name": "Reddit Prompt"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -380,
        2320
      ],
      "id": "f3cf31ef-390e-4498-a3d9-cc33b90917ca",
      "name": "4.1-mini",
      "credentials": {
        "openAiApi": {
          "id": "T7XqlsJ9D3iey8AW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "typeVersion": 1,
      "position": [
        2220,
        2320
      ],
      "id": "69ec8bd4-505c-4774-b930-aa41990215db",
      "name": "Wikipedia"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b8d1d130-ee6e-454d-aee9-288fd05c1347",
              "name": "text",
              "value": "={{ $('Set Chat').item.json.text }}",
              "type": "string"
            },
            {
              "id": "7fa6e840-8bd4-46f8-a32e-44c4e4c8633c",
              "name": "prompt",
              "value": "={{ $json.prompt }}",
              "type": "string"
            },
            {
              "id": "ae2e75c1-b4ae-4332-8f6c-f2e3b083cc3b",
              "name": "memory",
              "value": "={{ $json.memory }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        1220
      ],
      "id": "a3ff53d5-4d3c-42ae-bd81-a99a6bc68411",
      "name": "Chat"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7c89689e-f583-4abe-8911-83c6673543f6",
              "name": "text",
              "value": "={{ $json.chatInput || $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        1240
      ],
      "id": "599f698f-c557-420e-86cc-611d71c191e2",
      "name": "Set Chat"
    },
    {
      "parameters": {
        "toolDescription": "Call this tool to perform web searches",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Content-type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{placeholder}\",\n  \"topic\": \"general\",\n  \"search_depth\": \"basic\",\n  \"chunks_per_source\": 3,\n  \"max_results\": 1,\n  \"time_range\": null,\n  \"days\": 7,\n  \"include_answer\": true,\n  \"include_raw_content\": false,\n  \"include_images\": false,\n  \"include_image_descriptions\": false,\n  \"include_domains\": [],\n  \"exclude_domains\": []\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        2080,
        2320
      ],
      "id": "e90c6ee9-c1a1-492a-a5c0-84c3548dde75",
      "name": "Search web",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Fuba46nFrCCHTyc9",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Call this tool to access YouTube API",
        "resource": "video",
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', ``, 'number') }}",
        "filters": {
          "publishedBefore": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Published_Before', ``, 'string') }}",
          "q": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
          "regionCode": "US"
        },
        "options": {
          "order": "date"
        }
      },
      "type": "n8n-nodes-base.youTubeTool",
      "typeVersion": 1,
      "position": [
        2360,
        2320
      ],
      "id": "38c6dc5c-edc9-4ff4-a917-8dccc70def02",
      "name": "YouTube",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "kaehDW4Ii5Pf7uw4",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You interact with YouTube. Use the available tool(s) to search for videos or perform other YouTube actions.\\\\n\\\\nFormat responses as follows:\\\\n\\\\nTitle\\\\nUpload Date: dd/mm/yyy\\\\nURL\",\n  \"memory\": \"youtube\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        20,
        1200
      ],
      "id": "a9993079-ee1a-424f-a013-70d9c75505e0",
      "name": "YouTube Prompt"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You interact with Wikipedia. Use the available tool(s) to search for articles or retrieve information.\",\n  \"memory\": \"wikipedia\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        940
      ],
      "id": "2f6124bc-5b2c-417e-bd7e-8946d6fd3d6b",
      "name": "Wikipedia Prompt"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You manage expenses. Use the available tools to create, get, update, and delete expenses.\\n\\nExpense details include: name, cost, and date added.\\n\\nWhen CREATING an expense: Provide the 'name' and 'cost'. The 'date added' will automatically default to today's date. If you provide a specific date in your request, that date will be used instead.\\n\\nWhen UPDATING an expense: Specify the expense to update and the details you want to change (name, cost, or date added).\\nWhen GETTING or DELETING expenses: Identify the specific expense.\",\n  \"memory\": \"expenses\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        840
      ],
      "id": "d3fd5108-3940-4843-b8ec-defcbd33894a",
      "name": "Expenses Prompt"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are the Help Assistant for this system. Your ONLY job is to explain how users can make requests to use the system's different capabilities by providing clear examples of user prompts. You MUST NOT attempt to call any tools or perform any actions yourself. Only provide example usage instructions.\\n\\nWhen the user asks for help or how to do something (e.g., 'How do I use tasks?', 'Help with email', 'What can you do?'), explain the relevant function and give 1-2 simple examples of what the user should say.\\n\\nHere are the functions and example templates you should follow:\\n\\n*   **Task Management:** Explain that users can create, get, update, and delete tasks.\\n    *   Examples: \\\"Create a task 'Buy milk' status todo\\\", \\\"Show me my tasks\\\", \\\"Update task 'Buy milk' to complete\\\", \\\"Delete the task 'Buy milk'\\\"\\n*   **Email:** Explain getting, sending, replying to emails, and finding contact addresses.\\n    *   Examples: \\\"Check my email\\\", \\\"Send an email to jane.doe@example.com about the project update\\\", \\\"Reply to the last email from John Smith saying 'Thanks!'\\\", \\\"Find the email address for Sarah Lee\\\" (Explain the system will use contacts if needed before sending/replying).\\n*   **Calendar Events:** Explain creating, getting, updating, deleting events.\\n    *   Examples: \\\"Create event 'Doctor Appointment' for tomorrow at 3 PM\\\", \\\"What's on my calendar today?\\\", \\\"Change the 'Doctor Appointment' time to 4 PM\\\", \\\"Delete the 'Doctor Appointment' event\\\"\\n*   **Hacker News:** Explain getting articles.\\n    *   Examples: \\\"Get the top articles from Hacker News\\\", \\\"Show me the latest Hacker News posts\\\"\\n*   **Reddit:** Explain retrieving posts.\\n    *   Examples: \\\"Get posts from the r/technology subreddit about AI\\\", \\\"Find top posts on r/python today\\\"\\n*   **Web Search:** Explain searching the web and that results include title, snippet, date, URL.\\n    *   Examples: \\\"Search the web for 'best Python libraries for data science'\\\", \\\"Find recent news about electric cars\\\"\\n*   **YouTube:** Explain searching for videos.\\n    *   Examples: \\\"Search YouTube for 'learn Javascript tutorial'\\\", \\\"Find music videos by Queen on YouTube\\\"\\n*   **Wikipedia:** Explain searching for articles/information.\\n    *   Examples: \\\"Look up 'Photosynthesis' on Wikipedia\\\", \\\"Get the Wikipedia page for 'Paris'\\\"\\n*   **Bills:** Explain creating (name, price, date - status defaults 'due'), getting, updating, deleting bills.\\n    *   Examples: \\\"Create a bill: Name 'Electricity', Price $75, Date 'next Monday'\\\", \\\"Add bill 'Rent', $1200, paid, date 'today'\\\", \\\"Show me my due bills\\\", \\\"Update the 'Electricity' bill status to paid\\\", \\\"Delete the 'Rent' bill\\\"\\n*   **Expenses:** Explain creating (name, cost, date), getting, updating, deleting expenses.\\n    *   Examples: \\\"Add expense: Name 'Coffee', Cost $4.50, Date 'today'\\\", \\\"Log an expense 'Team Lunch' for $80 on Friday\\\", \\\"Show my expenses for this week\\\", \\\"Update 'Coffee' expense cost to $5\\\", \\\"Delete the 'Team Lunch' expense\\\"\\n*   **Contacts:** Explain getting and creating contacts (First name, Last name, email, mobile) and that the system asks if info is missing on creation.\\n    *   Examples: \\\"Get contact info for Mark Johnson\\\", \\\"Show all contacts\\\", \\\"Create contact: First Bob, Last Martin, email bob.m@email.com, mobile 123-456-7890\\\", \\\"Add contact Peter Pan, email peter@neverland.net\\\" (Explain the system might ask for missing first/last name or mobile).\\n\\nRespond only with these explanations and examples when asked for help.\",\n  \"memory\": \"helper\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        1200
      ],
      "id": "a14af08e-fac8-47c2-a608-1e17b88ca468",
      "name": "Help Prompt"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Chat').item.json.memory }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryZep",
      "typeVersion": 1.3,
      "position": [
        -240,
        2320
      ],
      "id": "df61e0d8-632b-496c-893b-f37976801c88",
      "name": "Zep Specifics",
      "credentials": {
        "zepApi": {
          "id": "m1sCkymodecr5uW0",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "all_memories"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryZep",
      "typeVersion": 1.3,
      "position": [
        -240,
        2520
      ],
      "id": "8ef6940c-f19b-4a79-b0f9-44eb6421c13d",
      "name": "Zep All",
      "credentials": {
        "zepApi": {
          "id": "m1sCkymodecr5uW0",
          "name": "Zep Api account"
        }
      }
    },
    {
      "parameters": {
        "name": "HeyGen_AGENT",
        "description": "Call this tool to perform actions in HeyGen: generate avatars and automatically publish posts.",
        "workflowId": {
          "__rl": true,
          "value": "0BcEYM5yaxk2m1ip",
          "mode": "list",
          "cachedResultName": "HeyGen"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        80,
        2320
      ],
      "id": "cb0acef5-24ad-4629-9263-436c32cbd40e",
      "name": "HeyGen AUTO"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"prompt\": \"You are a HeyGen assistant. Available tools: generate_avatar, publish_post.\\n\\nInstructions:\\n1. Use `generate_avatar` to create video avatars based on the provided script, style, voice, and template parameters.\\n2. Use `publish_post` to schedule or immediately publish the generated avatar video to the target platform or channel.\\n3. Always confirm that you have the necessary inputs (script_text, template_id, voice_id, publish_time) before calling a tool.\",\n  \"memory\": \"heygen\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -380,
        460
      ],
      "id": "53639858-2302-4b35-b1be-87d12cbb5457",
      "name": "Heygen Prompt"
    },
    {
      "parameters": {
        "name": "Instagram_REEL_Agent",
        "description": "Call this tool to perform actions in Instagram: analyze competitor content, find trending Reels, and create Reels scripts.",
        "workflowId": {
          "__rl": true,
          "value": "orDpOsjd05afKEDx",
          "mode": "list",
          "cachedResultName": "SHABLON_IZ_INSTAGRAM_P1_MASTER_AI_CHAT"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        200,
        2320
      ],
      "id": "4bbfd213-0e22-4ae7-bfe0-1efdc015e4d7",
      "name": "Instagram REELS AGENT"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are **Instagram_REELS_Agent**. Available tools: analyze_competitors, find_reels, create_reels_script.\\n\\nInstructions:\\n1. Use `analyze_competitors` to gather insights on competitor content, including engagement metrics, posting frequency, and top-performing formats.\\n2. Use `find_reels` to discover trending or high-potential Reels in the target niche by keyword, hashtag, or competitor profile.\\n3. Use `create_reels_script` to draft a concise, engaging script or storyboard for a new Reel, incorporating insights from the competitor analysis and trending formats.\\n4. Always verify you have the target niche, competitor list, and any style guidelines before generating the script.\",\n  \"memory\": \"instagram_reels_agent\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        460
      ],
      "id": "14d66e94-156f-4cb7-b826-c3bbe1376999",
      "name": "Instagram REEL Prompt"
    },
    {
      "parameters": {
        "name": "Dinamic_model_llm",
        "description": "Call this tool (`Dinamic_model_llm`) to answer general, open-ended questions with dynamic LLM model selection.",
        "workflowId": {
          "__rl": true,
          "value": "9JzjB8ItD82Beq0L",
          "mode": "list",
          "cachedResultName": "Динамическая модель ChatModel"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        320,
        2320
      ],
      "id": "9c85cecf-7076-4482-9d9b-8b45992b6d2f",
      "name": "Dinamic model AGENT"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are **Dinamic_model_llm**. Your task is to answer open-ended questions by automatically selecting the most suitable LLM model for each query.\\n\\nInstructions:\\n1. Analyze the user's question to assess its complexity, domain, and style.\\n2. Dynamically choose an appropriate model (e.g., GPT-4, GPT-3.5, Claude, etc.) based on that analysis.\\n3. Use the selected model to generate a clear, concise, and accurate response.\\n4. If the question is ambiguous or needs more detail, ask a clarifying follow-up.\\n5. No other tools are needed—just provide the best possible answer.\",\n  \"memory\": \"dinamic_model_llm\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -380,
        960
      ],
      "id": "28030c7a-4443-4e34-b2a9-ceef9637b94f",
      "name": "Dinamic Model Prompt"
    },
    {
      "parameters": {
        "name": "copywriter_news_agent",
        "description": "Call this tool (`copywriter_news_agent`) to create text content for Telegram channels, Threads, and Instagram posts by sourcing and crafting news-based material tailored to a target audience.",
        "workflowId": {
          "__rl": true,
          "value": "3nmBSBTEDq3WcbQI",
          "mode": "list",
          "cachedResultName": "Отдел AI Agent Копирайтер Новостник (в системе)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "2123214",
              "displayName": "2123214",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "2242433",
              "displayName": "2242433",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        440,
        2320
      ],
      "id": "6ba4af49-c77a-462c-b2f5-4343f81ee090",
      "name": "Copywriter News AGENT"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are **copywriter_news_agent**. Available tools: identify_audience, find_news, create_content.\\n\\nInstructions:\\n1. Use `identify_audience` to define the target audience, including demographics, interests, and pain points.\\n2. Use `find_news` to locate the most relevant and timely news items for that audience.\\n3. Use `create_content` to draft engaging, platform-specific text posts for Telegram, Threads, and Instagram, adjusting tone, length, and style for each.\\n4. Always confirm you have the following inputs before proceeding: audience_profile, selected_news_item, platform (Telegram/Threads/Instagram), and desired tone.\",\n  \"memory\": \"copywriter_news_agent\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        1480
      ],
      "id": "f20fa547-3be8-4766-bfdf-c6ea25ea72a8",
      "name": "COPY NEWS Prompt"
    },
    {
      "parameters": {
        "name": "backup_agent",
        "description": "Call this tool (`backup_agent`) to create backups of n8n workflows and templates on the server.",
        "workflowId": {
          "__rl": true,
          "value": "LfeLkzmpBBYJY0mu",
          "mode": "list",
          "cachedResultName": "BACKUP"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        560,
        2320
      ],
      "id": "887b6181-e232-4450-9bac-d5ddffb963fa",
      "name": "Backup AGENT"
    },
    {
      "parameters": {
        "name": "baza_agent",
        "description": "Call this tool (`baza_agent`) to interact with the database: read or write information.",
        "workflowId": {
          "__rl": true,
          "value": "LfeLkzmpBBYJY0mu",
          "mode": "list",
          "cachedResultName": "BACKUP"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        680,
        2320
      ],
      "id": "5a903862-320e-4564-9e80-1455c70bb937",
      "name": "BAZA AGENT"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are **backup_agent**. Available tools: list_templates, export_template, upload_backup.\\n\\nInstructions:\\n1. Use `list_templates` to retrieve all existing workflow templates on the n8n server.\\n2. Use `export_template` to export each template in JSON format.\\n3. Use `upload_backup` to save each exported template to the designated backup location with a timestamped filename.\\n4. Ensure you have the correct server credentials and write permissions before starting.\\n5. After completing, provide a summary of which templates were backed up and the storage paths used.\",\n  \"memory\": \"backup_agent\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        1080
      ],
      "id": "d5f96455-5025-470c-a9e1-809990d02191",
      "name": "BackUp Prompt"
    },
    {
      "parameters": {
        "name": "tiktok_agent",
        "description": "Call this tool (`tiktok_agent`) to discover similar TikTok profiles, analyze their top content, and craft a shooting script for comparable videos.",
        "workflowId": {
          "__rl": true,
          "value": "gwIeFUdVzUg6nW6U",
          "mode": "list",
          "cachedResultName": "SHABLON_TIKTOK_P1_MASTER_AI_SYSTEM"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "2123214",
              "displayName": "2123214",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "2242433",
              "displayName": "2242433",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        800,
        2320
      ],
      "id": "bd0093fb-9897-4d00-b917-94a6c93e0ece",
      "name": "TikTok AGENT"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are **tiktok_agent**. Available tools: find_similar_profiles, analyze_content, create_script.\\n\\nInstructions:\\n1. Use `find_similar_profiles` to identify TikTok accounts in the same niche or with similar audience characteristics.\\n2. Use `analyze_content` to evaluate each profile’s top-performing videos—capture engagement metrics, trending formats, and creative hooks.\\n3. Use `create_script` to draft a concise, compelling TikTok video script that incorporates the successful elements identified in the analysis.\\n4. Before proceeding, ensure you have the following inputs: target_niche or seed_profile, number_of_profiles_to_analyze, and any specific style or branding guidelines.\",\n  \"memory\": \"tiktok_agent\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        40,
        1480
      ],
      "id": "214fd112-7ed4-44fe-ab6f-f6b1dd4c273e",
      "name": "TikTok Prompt"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "app2vioOyPFvFn7XE",
          "mode": "list",
          "cachedResultName": "Instagram_agent_n8n",
          "cachedResultUrl": "https://airtable.com/app2vioOyPFvFn7XE"
        },
        "table": {
          "__rl": true,
          "value": "tbl7V6L6E6GwpFHfU",
          "mode": "list",
          "cachedResultName": "Instagram_COMPETITORS",
          "cachedResultUrl": "https://airtable.com/app2vioOyPFvFn7XE/tbl7V6L6E6GwpFHfU"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        1080,
        2320
      ],
      "id": "99bd6dd9-2131-4d3d-bbfa-5de7fc98441f",
      "name": "Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "I2xyDRh4mGB6rGH2",
          "name": "Airtable Personal Access Token account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt\": \"You are **airtable_instagram**. Available tools: search_profiles.\\n\\nInstructions:\\n1. Use `search_profiles` to query the Airtable Instagram table with filters such as account_name, minimum or maximum follower_count, or keywords in profile_description.\\n2. If the user asks for a specific account, return the full record including account_name, follower_count, and profile_description.\\n3. For broader requests (e.g., top profiles by follower count or profiles matching a description keyword), return a list of matching records with key fields.\\n4. Always confirm you have the correct query parameters before calling the tool.\\n\",\n  \"memory\": \"airtable_instagram\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        1340
      ],
      "id": "e9c3f046-5cee-4b94-b7f9-5f79544c1470",
      "name": "AirTable Instagram Prompt"
    },
    {
      "parameters": {
        "inputText": "={{ $json.text }}",
        "categories": {
          "categories": [
            {
              "category": "Web search",
              "description": "Is this exclusively related to a web search and not Hacker News or Wikipedia?"
            },
            {
              "category": "HeyGen",
              "description": "Is this related to generating avatars and auto-publishing content using HeyGen?"
            },
            {
              "category": "Instagram Reels",
              "description": "Is this related to analyzing competitor content, finding trending Instagram Reels, and creating scripts for new Reels?"
            },
            {
              "category": "Hacker News",
              "description": "Is this related to hacker news?"
            },
            {
              "category": "Reddit",
              "description": "Is this related to Reddit?"
            },
            {
              "category": "Calendar",
              "description": "Is this a request to schedule, modify, or retrieve events in the calendar using the Calendar?"
            },
            {
              "category": "Dinamic Model",
              "description": "Is this an open-ended or general question that doesn’t fit other specific routes and requires dynamic model selection by Dinamic_model_llm?"
            },
            {
              "category": "Wikipedia",
              "description": "Is this related to Wikipedia?"
            },
            {
              "category": "Bills",
              "description": "Is this related to bills?"
            },
            {
              "category": "YouTube",
              "description": "Is this related to YouTube?"
            },
            {
              "category": "BackUp",
              "description": "Is this related to creating backups of n8n workflows and templates on the server?"
            },
            {
              "category": "Help",
              "description": "Does this contain the word \"Help\"?"
            },
            {
              "category": "Airtable Instagram",
              "description": "Is this a request to search or retrieve Instagram profile data from the Airtable base?"
            },
            {
              "category": "BAZA",
              "description": "Is this a request to read from or write information to the database using the baza_agent?"
            },
            {
              "category": "TikTok",
              "description": "Is this related to finding similar TikTok profiles, analyzing their content, and creating a script for new TikTok videos?"
            },
            {
              "category": "Copy News",
              "description": "Is this related to defining a target audience, sourcing relevant news items, and crafting text posts for Telegram, Threads, or Instagram?"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "Please classify the text provided by the user into one of the following categories: {categories}, and use the provided formatting instructions below. Don't explain, and only output the json."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -1000,
        1260
      ],
      "id": "35c5ef19-9742-4bb9-b74c-b0de815da762",
      "name": "Text Classifier (routing Agent)"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"prompt\": \"You are **baza_agent**. Available tools: read_from_db, write_to_db.\\n\\nInstructions:\\n1. Use `read_from_db` to fetch data from the database given table names, query parameters, or filters.\\n2. Use `write_to_db` to insert, update, or delete records, ensuring data integrity and validation.\\n3. Always sanitize and validate inputs before performing any database operation.\\n4. Return the result set for read operations or a confirmation message for write operations.\",\n  \"memory\": \"baza_agent\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        1660
      ],
      "id": "7265d67d-e43f-4920-946d-65507feba8b1",
      "name": "BAZA Prompt"
    },
    {
      "parameters": {
        "content": "## Если вы изменяете или добавляете новые подсказки, убедитесь, что маршрутизатор также знает об этом.",
        "height": 120,
        "width": 540,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1220,
        1060
      ],
      "typeVersion": 1,
      "id": "44065b85-7258-4835-b1ce-3e5b80c9875d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Динамическая промпт + память",
        "height": 80,
        "width": 440,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        700,
        1080
      ],
      "typeVersion": 1,
      "id": "a4870624-0183-40ef-8894-297080e8ad56",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## При желании вы можете изменить промпты.",
        "height": 80,
        "width": 580,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -460,
        160
      ],
      "typeVersion": 1,
      "id": "13019c92-cde8-4b9b-8819-af02bc694de7",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Видео по настройке ZEP: https://youtu.be/NHEB8G34e-Y",
        "height": 120,
        "width": 540,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -420,
        2660
      ],
      "typeVersion": 1,
      "id": "75675f6f-74f1-412f-b1c3-dea18d914ef5",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Видео по настройке Think: https://youtu.be/6GwKcWVmsFo",
        "height": 120,
        "width": 540,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        2900
      ],
      "typeVersion": 1,
      "id": "71e5a4bc-254b-4d1d-8bdc-8e659a8be68c",
      "name": "Sticky Note6"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Set Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Search Web Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4.1-nano": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier (routing Agent)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Event": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Hacker News": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Reddit": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HackerNews Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reddit Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4.1-mini": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Chat": {
      "main": [
        [
          {
            "node": "Text Classifier (routing Agent)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search web": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "YouTube": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expenses Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Help Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zep Specifics": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HeyGen AUTO": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Heygen Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram REELS AGENT": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Instagram REEL Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dinamic model AGENT": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Dinamic Model Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Copywriter News AGENT": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "COPY NEWS Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Backup AGENT": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "BackUp Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BAZA AGENT": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "TikTok AGENT": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "TikTok Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AirTable Instagram Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier (routing Agent)": {
      "main": [
        [
          {
            "node": "Search Web Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Heygen Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Instagram REEL Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HackerNews Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reddit Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Calendar Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Dinamic Model Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wikipedia Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Expenses Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "YouTube Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "BackUp Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Help Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AirTable Instagram Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "BAZA Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "TikTok Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "COPY NEWS Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BAZA Prompt": {
      "main": [
        [
          {
            "node": "Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "61276441-8e39-4a30-943d-d0f50d955ded",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "479931a9b1c0980217b795eef202ec08aa8efa5933ee558f5e5c7dc32b0cdc9e"
  },
  "id": "32BQDECRv1bxw5Kj",
  "tags": []
}