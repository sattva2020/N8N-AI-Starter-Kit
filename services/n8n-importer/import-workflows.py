#!/usr/bin/env python3
"""
N8N Workflows Auto-Importer v1.2.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç workflows –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import json
import time
import requests
import logging
from pathlib import Path
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/app/import.log')
    ]
)
logger = logging.getLogger(__name__)

class N8NWorkflowImporter:
    def __init__(self, n8n_url: str = "http://n8n:5678"):
        self.n8n_url = n8n_url
        self.workflows_dir = Path("/workflows")
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        
    def wait_for_n8n(self, max_wait: int = 300) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ N8N"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ N8N...")
        
        start_time = time.time()
        while time.time() - start_time < max_wait:
            try:
                response = self.session.get(f"{self.n8n_url}/healthz", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ N8N –≥–æ—Ç–æ–≤!")
                    return True
            except requests.RequestException:
                pass
            
            logger.info("‚è≥ N8N –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–µ–º...")
            time.sleep(5)
        
        logger.error("‚ùå N8N –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    
    def setup_auth(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            response = self.session.get(f"{self.n8n_url}/rest/users")
            
            if response.status_code == 401:
                # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ—ë –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                logger.info("üîì N8N —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å workflows –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                test_response = self.session.get(f"{self.n8n_url}/rest/workflows")
                if test_response.status_code == 401:
                    logger.warning("‚ö†Ô∏è N8N —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –î–ª—è –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å N8N –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
                    return False
                    
            return True
        except requests.RequestException as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
    
    def get_existing_workflows(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö workflows"""
        try:
            response = self.session.get(f"{self.n8n_url}/rest/workflows")
            if response.status_code == 200:
                workflows = response.json()
                return {wf['name']: wf['id'] for wf in workflows.get('data', [])}
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ workflows: {response.status_code}")
                return {}
        except requests.RequestException as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ workflows: {e}")
            return {}
    
    def load_workflow_file(self, file_path: Path) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ workflow –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                workflow_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if 'name' not in workflow_data:
                workflow_data['name'] = file_path.stem
            
            if 'active' not in workflow_data:
                workflow_data['active'] = True
                
            return workflow_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
            return None
    
    def import_workflow(self, workflow_data: Dict, file_name: str) -> bool:
        """–ò–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ workflow"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ workflow —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            existing_workflows = self.get_existing_workflows()
            workflow_name = workflow_data.get('name', file_name)
            
            if workflow_name in existing_workflows:
                logger.info(f"üìã Workflow '{workflow_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π workflow
                workflow_id = existing_workflows[workflow_name]
                response = self.session.put(
                    f"{self.n8n_url}/rest/workflows/{workflow_id}",
                    json=workflow_data
                )
            else:
                logger.info(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π workflow: {workflow_name}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workflow
                response = self.session.post(
                    f"{self.n8n_url}/rest/workflows",
                    json=workflow_data
                )
            
            if response.status_code in [200, 201]:
                logger.info(f"‚úÖ {workflow_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º workflow –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                if workflow_data.get('active', False):
                    self.activate_workflow(workflow_name)
                
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {workflow_name}: {response.status_code} - {response.text}")
                return False
                
        except requests.RequestException as e:
            logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {file_name}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {file_name}: {e}")
            return False
    
    def activate_workflow(self, workflow_name: str) -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow"""
        try:
            existing_workflows = self.get_existing_workflows()
            if workflow_name not in existing_workflows:
                return False
            
            workflow_id = existing_workflows[workflow_name]
            response = self.session.post(f"{self.n8n_url}/rest/workflows/{workflow_id}/activate")
            
            if response.status_code == 200:
                logger.info(f"üü¢ Workflow '{workflow_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å '{workflow_name}': {response.status_code}")
                return False
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ '{workflow_name}': {e}")
            return False
    
    def import_all_workflows(self) -> Dict[str, int]:
        """–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö workflows –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏)"""
        if not self.workflows_dir.exists():
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.workflows_dir}")
            return {'imported': 0, 'failed': 0, 'updated': 0}
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏
        workflow_files = list(self.workflows_dir.rglob("*.json"))
        if not workflow_files:
            logger.info("üìÅ –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            return {'imported': 0, 'failed': 0, 'updated': 0}
        
        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(workflow_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (–≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏)")
        
        imported = 0
        failed = 0
        updated = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        def get_priority(file_path):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–º–ø–æ—Ä—Ç–∞"""
            parent_dir = file_path.parent.name
            file_name = file_path.stem
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–∞–ø–∫–∞–º: production > testing > examples > –∫–æ—Ä–µ–Ω—å
            folder_priority = {
                'production': 1,
                'testing': 2, 
                'examples': 3
            }.get(parent_dir, 4)  # –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ç–∏–ø—É workflow
            name_priority = 0
            if 'quick-rag-test' in file_name:
                name_priority = 1
            elif 'advanced-rag-pipeline-test' in file_name:
                name_priority = 2
            elif 'advanced-rag-automation' in file_name:
                name_priority = 3
            else:
                name_priority = 9
                
            return (folder_priority, name_priority)
        
        sorted_files = sorted(workflow_files, key=get_priority)
          # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        logger.info("üìã –ü–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–∞ workflows:")
        for i, file in enumerate(sorted_files, 1):
            relative_path = file.relative_to(self.workflows_dir)
            logger.info(f"  {i}. {relative_path}")
        
        for file in sorted_files:
            relative_path = file.relative_to(self.workflows_dir)
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {relative_path}")
            
            workflow_data = self.load_workflow_file(file)
            if workflow_data:
                existing_workflows = self.get_existing_workflows()
                workflow_name = workflow_data.get('name', file.stem)
                
                if self.import_workflow(workflow_data, file.stem):
                    if workflow_name in existing_workflows:
                        updated += 1
                    else:
                        imported += 1
                else:
                    failed += 1
            else:
                failed += 1
        
        return {'imported': imported, 'failed': failed, 'updated': updated}
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞"""
        logger.info("üöÄ N8N Workflows Auto-Importer v1.2.0")
        logger.info("=" * 50)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ N8N
        if not self.wait_for_n8n():
            logger.error("‚ùå N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç")
            return False
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(5)
        
        # –ò–º–ø–æ—Ä—Ç workflows
        results = self.import_all_workflows()
        
        # –û—Ç—á–µ—Ç
        logger.info("\n" + "=" * 50)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–ú–ü–û–†–¢–ê:")
        logger.info(f"   üì• –ù–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {results['imported']}")
        logger.info(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {results['failed']}")
        
        total_success = results['imported'] + results['updated']
        if results['failed'] == 0 and total_success > 0:
            logger.info("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        elif total_success > 0:
            logger.info("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏")
        else:
            logger.error("‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        
        logger.info("=" * 50)
        return results['failed'] == 0

if __name__ == "__main__":
    importer = N8NWorkflowImporter()
    success = importer.run()
    exit(0 if success else 1)
