# üåê Web Interface Service
# ========================
# FastAPI + Jinja2 –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è n8n-ai-starter-kit

import os
import logging
from typing import List, Optional, Dict, Any
from datetime import datetime
import asyncio
import aiohttp

import uvicorn
from fastapi import FastAPI, HTTPException, Request, Form, UploadFile, File
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Web Interface Service",
    description="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–∏—Å–∫–∞ –≤ n8n-ai-starter-kit",
    version="1.2.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOCUMENT_PROCESSOR_URL = os.getenv("DOCUMENT_PROCESSOR_URL", "http://document-processor:8001")

# –ú–æ–¥–µ–ª–∏ Pydantic
class SearchRequest(BaseModel):
    query: str
    limit: int = 10
    categories: Optional[List[str]] = None
    tags: Optional[List[str]] = None

class DocumentInfo(BaseModel):
    id: str
    title: str
    content: str
    metadata: Optional[Dict[str, Any]] = None
    categories: Optional[List[str]] = None
    tags: Optional[List[str]] = None
    version: Optional[str] = None
    created_at: Optional[str] = None
    last_modified_at: Optional[str] = None

# Health Check
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ document-processor
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DOCUMENT_PROCESSOR_URL}/health") as response:
                dp_status = "ok" if response.status == 200 else "error"
    except:
        dp_status = "error"
    
    return {
        "status": "healthy" if dp_status == "ok" else "unhealthy",
        "version": "1.2.0",
        "services": {
            "document_processor": dp_status,
            "templates": "ok",
            "static_files": "ok"
        }
    }

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return templates.TemplateResponse("index.html", {
        "request": request,
        "title": "N8N AI Starter Kit",
        "version": "1.2.0"
    })

@app.get("/upload", response_class=HTMLResponse)
async def upload_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    return templates.TemplateResponse("upload.html", {
        "request": request,
        "title": "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    })

@app.get("/search", response_class=HTMLResponse)
async def search_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞"""
    return templates.TemplateResponse("search.html", {
        "request": request,
        "title": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    })

@app.get("/analytics", response_class=HTMLResponse)
async def analytics_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return templates.TemplateResponse("analytics.html", {
        "request": request,
        "title": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    })

@app.get("/documents", response_class=HTMLResponse)
async def documents_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"""
    return templates.TemplateResponse("documents.html", {
        "request": request,
        "title": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"
    })

# API endpoints
@app.post("/api/upload")
async def upload_document(
    file: UploadFile = File(...),
    categories: Optional[str] = Form(None),
    tags: Optional[str] = Form(None)
):
    """API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ document-processor
        async with aiohttp.ClientSession() as session:
            data = aiohttp.FormData()
            data.add_field('file', await file.read(), 
                          filename=file.filename, 
                          content_type=file.content_type)
            if categories:
                data.add_field('categories', categories)
            if tags:
                data.add_field('tags', tags)
            
            async with session.post(f"{DOCUMENT_PROCESSOR_URL}/documents/upload", 
                                  data=data) as response:
                result = await response.json()
                return result
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/search")
async def search_documents(request: SearchRequest):
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ document-processor
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{DOCUMENT_PROCESSOR_URL}/documents/search",
                json=request.dict(exclude_unset=True)
            ) as response:
                result = await response.json()
                return result
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/documents")
async def list_documents(
    request: Request,
    query: Optional[str] = None,
    category: Optional[str] = None,
    tag: Optional[str] = None,
    sort_by: Optional[str] = "created_at",
    sort_order: Optional[str] = "desc",
    limit: int = 10,
    offset: int = 0
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    try:
        params = {
            "query": query,
            "category": category,
            "tag": tag,
            "sort_by": sort_by,
            "sort_order": sort_order,
            "limit": limit,
            "offset": offset
        }
        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {k: v for k, v in params.items() if v is not None}

        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ document-processor
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DOCUMENT_PROCESSOR_URL}/documents", params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    logger.warning("Document processor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    documents = [
                        {
                            "id": "doc_1",
                            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 1",
                            "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏...",
                            "metadata": {"type": "text", "size": 1024},
                            "categories": ["AI", "Machine Learning"],
                            "tags": ["tutorial", "basics"],
                            "version": "1.0",
                            "created_at": "2024-01-01T10:00:00Z",
                            "last_modified_at": datetime.now().isoformat()
                        },
                        {
                            "id": "doc_2", 
                            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 2",
                            "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ...",
                            "metadata": {"type": "pdf", "size": 2048},
                            "categories": ["AI", "Research"],
                            "tags": ["paper", "advanced"],
                            "version": "1.1",
                            "created_at": "2024-01-15T11:30:00Z",
                            "last_modified_at": datetime.now().isoformat()
                        },
                        {
                            "id": "doc_3", 
                            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 3",
                            "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö...",
                            "metadata": {"type": "text", "size": 1500},
                            "categories": ["Neural Networks"],
                            "tags": ["deep learning"],
                            "version": "1.0",
                            "created_at": "2024-02-01T12:00:00Z",
                            "last_modified_at": datetime.now().isoformat()
                        }
                    ]
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
                    filtered_documents = []
                    for doc in documents:
                        match = True
                        if query and query.lower() not in doc["content"].lower() and query.lower() not in doc["title"].lower():
                            match = False
                        if category and (not doc["categories"] or category not in doc["categories"]):
                            match = False
                        if tag and (not doc["tags"] or tag not in doc["tags"]):
                            match = False
                        if match:
                            filtered_documents.append(doc)

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
                    if sort_by:
                        filtered_documents.sort(key=lambda x: x.get(sort_by, ''), reverse=(sort_order == 'desc'))

                    return {
                        "documents": filtered_documents[offset:offset+limit],
                        "total": len(filtered_documents)
                    }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "documents": [],
            "total": 0,
            "error": str(e)
        }

@app.delete("/api/documents/{document_id}")
async def delete_document(document_id: str):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ document-processor
        async with aiohttp.ClientSession() as session:
            async with session.delete(
                f"{DOCUMENT_PROCESSOR_URL}/documents/{document_id}"
            ) as response:
                result = await response.json()
                return result
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/analytics")
async def get_analytics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ document-processor
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DOCUMENT_PROCESSOR_URL}/metrics") as response:
                metrics = await response.json()
                
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics = {
            "metrics": metrics,
            "charts": {
                "documents_by_type": {
                    "text": 5,
                    "pdf": 3,
                    "docx": 2
                },
                "searches_by_day": [
                    {"date": "2024-06-20", "searches": 15},
                    {"date": "2024-06-21", "searches": 23},
                    {"date": "2024-06-22", "searches": 18},
                    {"date": "2024-06-23", "searches": 31},
                    {"date": "2024-06-24", "searches": 28}
                ],
                "popular_queries": [
                    {"query": "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "count": 45},
                    {"query": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "count": 38},
                    {"query": "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "count": 29},
                    {"query": "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "count": 22},
                    {"query": "–≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫", "count": 18}
                ]
            }
        }
        
        return analytics
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return {
            "metrics": {"error": str(e)},
            "charts": {}
        }

@app.get("/api/status")
async def get_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å document-processor
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DOCUMENT_PROCESSOR_URL}/status") as response:
                dp_status = await response.json()
        
        return {
            "web_interface": {
                "service": "web-interface",
                "status": "running",
                "version": "1.2.0",
                "timestamp": datetime.now().isoformat()
            },
            "document_processor": dp_status
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return {
            "web_interface": {
                "service": "web-interface", 
                "status": "running",
                "version": "1.2.0",
                "timestamp": datetime.now().isoformat()
            },
            "document_processor": {
                "status": "error",
                "error": str(e)
            }
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ endpoints
@app.get("/api/notifications")
async def get_notifications():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notifications = [
        {
            "id": "1",
            "type": "info",
            "message": "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
            "timestamp": datetime.now().isoformat()
        },
        {
            "id": "2", 
            "type": "success",
            "message": "–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            "timestamp": datetime.now().isoformat()
        }
    ]
    
    return {"notifications": notifications}

@app.post("/api/notifications/{notification_id}/read")
async def mark_notification_read(notification_id: str):
    """API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ"""
    return {
        "notification_id": notification_id,
        "status": "read",
        "timestamp": datetime.now().isoformat()
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return templates.TemplateResponse("error.html", {
        "request": request,
        "title": "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        "error_code": 404,
        "error_message": "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    }, status_code=404)

@app.exception_handler(500)
async def server_error_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    return templates.TemplateResponse("error.html", {
        "request": request,
        "title": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        "error_code": 500,
        "error_message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }, status_code=500)

if __name__ == "__main__":
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8002,
        reload=True,
        log_level="info"
    )
