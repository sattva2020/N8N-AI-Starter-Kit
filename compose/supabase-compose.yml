services:
  supabase-storage:
    image: supabase/storage-api:latest
    container_name: supabase-storage
    restart: unless-stopped
    depends_on:
      tenant_db:
        condition: service_healthy
      pg_bouncer:
        condition: service_started
      # minio_setup:  # Commented out as minio_setup service is not available
      #   condition: service_completed_successfully
    environment:
      SERVER_PORT: 5000
      AUTH_JWT_SECRET: ${JWT_SECRET}
      AUTH_JWT_ALGORITHM: HS256
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@tenant_db:5432/postgres
      DATABASE_POOL_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@pg_bouncer:6432/postgres
      DB_INSTALL_ROLES: true
      STORAGE_BACKEND: s3
      STORAGE_S3_BUCKET: ${STORAGE_BUCKET:-supa-storage-bucket}
      STORAGE_S3_ENDPOINT: http://minio:9000
      STORAGE_S3_FORCE_PATH_STYLE: "true"
      STORAGE_S3_REGION: ${STORAGE_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-supa-storage}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-secret1234}
      UPLOAD_FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT_MAX:-524288000}
      UPLOAD_FILE_SIZE_LIMIT_STANDARD: ${FILE_SIZE_LIMIT:-52428800}
      UPLOAD_SIGNED_URL_EXPIRATION_TIME: 120
      TUS_URL_PATH: /upload/resumable
      TUS_URL_EXPIRY_MS: 3600000
      IMAGE_TRANSFORMATION_ENABLED: "true"
      IMGPROXY_URL: http://imgproxy:8080
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      TENANT_ID: ${POOLER_TENANT_ID:-n8n}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:5000/status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - supabase-internal
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase-storage.rule=Host(`${SUPABASE_STORAGE_DOMAIN:-storage.localhost}`)"
      - "traefik.http.routers.supabase-storage.entrypoints=websecure"
      - "traefik.http.routers.supabase-storage.tls.certresolver=myresolver"
      - "traefik.http.services.supabase-storage.loadbalancer.server.port=5000"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Остальные сервисы из инфраструктуры
  tenant_db:
    extends:
      service: tenant_db
      file: ../config/supabase/docker-compose-infra.yml

  pg_bouncer:
    extends:
      service: pg_bouncer
      file: ../config/supabase/docker-compose-infra.yml

  # minio already defined in main docker-compose.yml
  # minio:
  #   extends:
  #     service: minio
  #     file: ../config/supabase/docker-compose-infra.yml

  # minio_setup also depends on minio - using main docker-compose minio instead
  # minio_setup:
  #   extends:
  #     service: minio_setup
  #     file: ../config/supabase/docker-compose-infra.yml

  imgproxy:
    extends:
      service: imgproxy
      file: ../config/supabase/docker-compose-infra.yml

  # Оставляем Kong и Studio из текущей конфигурации
  supabase-kong:
    restart: unless-stopped
    networks:
      - supabase-internal
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    image: kong:2.8.1
    container_name: supabase-kong
    depends_on:
      - supabase-storage
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
    ports:
      - "8000:8000"
    volumes:
      - ./config/supabase/kong.yml:/var/lib/kong/kong.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase-api.rule=Host(`${SUPABASE_API_DOMAIN}`)"
      - "traefik.http.routers.supabase-api.entrypoints=websecure"
      - "traefik.http.routers.supabase-api.tls.certresolver=myresolver"
      - "traefik.http.services.supabase-api.loadbalancer.server.port=8000"

  supabase-studio:
    restart: unless-stopped
    networks:
      - supabase-internal
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    image: supabase/studio:latest
    container_name: supabase-studio
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/profile', (r) => {process.exit(r.statusCode !== 200)})"]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      STUDIO_PG_META_URL: http://supabase-meta:8080
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DEFAULT_ORGANIZATION: ${STUDIO_DEFAULT_ORGANIZATION:-n8n}
      DEFAULT_PROJECT: ${STUDIO_DEFAULT_PROJECT:-n8n-ai-project}
      SUPABASE_URL: http://supabase-kong:8000
      SUPABASE_REST_URL: http://supabase-kong:8000/rest/v1/
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.supabase-studio.rule=Host(`${SUPABASE_STUDIO_DOMAIN}`)"
      - "traefik.http.routers.supabase-studio.entrypoints=websecure"
      - "traefik.http.routers.supabase-studio.tls.certresolver=myresolver"
      - "traefik.http.services.supabase-studio.loadbalancer.server.port=3000"

networks:
  supabase-internal:
    driver: bridge
  # backend network is defined in networks.yml

volumes:
  supabase_db_data:
  supabase_minio_data:
