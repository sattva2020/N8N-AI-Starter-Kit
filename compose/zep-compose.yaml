name: zep-ce

services:
  zep:
    image: zepai/zep:latest
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ../config/zep.yaml:/app/zep.yaml
    env_file:
      - ../.env
    environment:
      - ZEP_CONFIG_FILE=zep.yaml
    networks:
      - zep-network
      - backend
    depends_on:
      graphiti:
        condition: service_healthy
      zep-db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zep.rule=Host(`${ZEP_DOMAIN}`)"
      - "traefik.http.routers.zep.entrypoints=websecure"
      - "traefik.http.routers.zep.tls.certresolver=myresolver"
      - "traefik.http.services.zep.loadbalancer.server.port=8000"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/healthz').read()"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  zep-db:
    image: postgres:15-bookworm
    container_name: zep-ce-postgres
    restart: unless-stopped
    shm_size: "256mb"
    environment:
      - POSTGRES_USER=${ZEP_POSTGRES_USER}
      - POSTGRES_PASSWORD=${ZEP_POSTGRES_PASSWORD}
      - POSTGRES_DB=${ZEP_POSTGRES_DB}
      # Vector search optimization settings
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - zep-db:/var/lib/postgresql/data
      # Add pgvector initialization script
      - ./scripts/init-pgvector.sql:/docker-entrypoint-initdb.d/10-init-pgvector.sql
    command: 
      - "postgres"
      - "-c"
      - "shared_buffers=512MB"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "maintenance_work_mem=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "work_mem=16MB"
    networks:
      - zep-network
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ZEP_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 384M

  graphiti:
    image: zepai/graphiti:0.3
    container_name: graphiti
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - zep-network
      - backend
    depends_on:
      neo4j:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graphiti.rule=Host(`${GRAPHITI_DOMAIN}`)"
      - "traefik.http.routers.graphiti.entrypoints=websecure"
      - "traefik.http.routers.graphiti.tls.certresolver=myresolver"
      - "traefik.http.services.graphiti.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/').read()"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  neo4j:
    image: neo4j:5.22.0
    container_name: neo4j-zep
    restart: unless-stopped
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/zepzepzep
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=1G
    networks:
      - zep-network
      - database
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

volumes:
  neo4j_data:
  zep-db:

# Сети определены в общем файле networks.yml