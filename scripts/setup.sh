#!/bin/bash
# filepath: scripts/setup.sh
# –í–µ—Ä—Å–∏—è: 1.5.3 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–∏–º–∏—Ç–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏ concurrent map writes

# Set parallel container limit to prevent concurrent map writes error
export COMPOSE_PARALLEL_LIMIT=1

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É docker compose –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ - –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ docker compose (–±–µ–∑ –¥–µ—Ñ–∏—Å–∞) –¥–æ—Å—Ç—É–ø–Ω–∞
  DC_CMD="docker compose"
elif command -v docker-compose >/dev/null 2>&1; then
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É docker-compose (—Å –¥–µ—Ñ–∏—Å–æ–º)
  DC_CMD="docker-compose"
else
  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  DC_CMD="docker compose"
fi

print_banner() {
  echo -e "${BLUE}====================================================${NC}"
  echo -e "${BOLD}     N8N AI Starter Kit - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞     ${NC}"
  echo -e "${BLUE}====================================================${NC}"
  echo -e "üìã ${YELLOW}–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã N8N AI Starter Kit${NC}\n"
}

print_success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
  echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
  echo -e "${RED}‚ùå $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
show_spinner() {
  local pid=$1
  local message=$2
  local delay=0.1
  local spinstr='|/-\'
  echo -e -n "${BLUE}$message${NC} "
  
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf "[%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
run_with_spinner() {
  local command="$1"
  local message="$2"
  
  # –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  eval "$command" &>/dev/null &
  local pid=$!
  
  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  show_spinner $pid "$message"
  
  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  wait $pid
  local exit_code=$?
  
  if [ $exit_code -eq 0 ]; then
    print_success "$message: –í—ã–ø–æ–ª–Ω–µ–Ω–æ!"
  else
    print_error "$message: –û—à–∏–±–∫–∞ (–∫–æ–¥ $exit_code)"
    return $exit_code
  fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –û–°
detect_os() {
  if [ -f /etc/os-release ]; then
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ OS-release
    . /etc/os-release
    OS_TYPE=$NAME
    OS_VERSION=$VERSION_ID
    print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS_TYPE $OS_VERSION"
  elif [ "$(uname)" == "Darwin" ]; then
    OS_TYPE="macOS"
    OS_VERSION=$(sw_vers -productVersion)
    print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS_TYPE $OS_VERSION"
  else
    OS_TYPE="Unknown"
    print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –û–°. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—â–∏–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
validate_domain_name() {
  local domain=$1
  # –ù–æ–≤–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞
  local domain_regex="^([a-zA-Z0-9](-?[a-zA-Z0-9]){0,62}\.)+[a-zA-Z]{2,}$"
  if [[ $domain =~ $domain_regex ]]; then
    return 0
  else
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email –∞–¥—Ä–µ—Å–∞
validate_email() {
  local email=$1
  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
  local email_regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
  
  if [[ $email =~ $email_regex ]]; then
    return 0  # –í–∞–ª–∏–¥–Ω—ã–π email
  else
    return 1  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
backup_existing_config() {
  if [ -f .env ]; then
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ .env..."
    local backup_dir="./backup/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    cp .env "$backup_dir/.env.backup"
    print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $backup_dir"
    
    # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ–ø–∏—Ä—É–µ–º –∏—Ö —Ç–æ–∂–µ
    if [ -f docker-compose.override.yml ]; then
      cp docker-compose.override.yml "$backup_dir/docker-compose.override.yml.backup"
      print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è docker-compose.override.yml —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    fi
    
    return 0  # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  else
    print_info "–§–∞–π–ª–∞ .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    return 1  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
install_required_utils() {
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç..."
  
  # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
  local utils=("curl" "openssl")
  local missing_utils=()
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–π —É—Ç–∏–ª–∏—Ç—ã
  for util in "${utils[@]}"; do
    if ! command -v "$util" &> /dev/null; then
      missing_utils+=("$util")
    fi
  done
  
  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
  if [ ${#missing_utils[@]} -gt 0 ]; then
    print_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing_utils[*]}"
    read -p "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã? (y/n): " install_utils
    
    if [ "$install_utils" = "y" ]; then
      if [[ "$OS_TYPE" == *"Ubuntu"* ]] || [[ "$OS_TYPE" == *"Debian"* ]]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç –Ω–∞ Ubuntu/Debian..."
        run_with_spinner "sudo apt-get update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
        run_with_spinner "sudo apt-get install -y ${missing_utils[*]}" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç"
      elif [[ "$OS_TYPE" == *"CentOS"* ]] || [[ "$OS_TYPE" == *"RHEL"* ]]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç –Ω–∞ CentOS/RHEL..."
        run_with_spinner "sudo yum install -y ${missing_utils[*]}" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç"
      elif [[ "$OS_TYPE" == *"Fedora"* ]]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç –Ω–∞ Fedora..."
        run_with_spinner "sudo dnf install -y ${missing_utils[*]}" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç"
      elif [[ "$OS_TYPE" == "macOS" ]]; then
        if command -v brew &> /dev/null; then
          print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç –Ω–∞ macOS —Å –ø–æ–º–æ—â—å—é Homebrew..."
          run_with_spinner "brew install ${missing_utils[*]}" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç"
        else
          print_warning "Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Homebrew –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ macOS."
          print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew: https://brew.sh"
        fi
      else
        print_error "–ù–µ —É–¥–∞—ë—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—ã –Ω–∞ –≤–∞—à–µ–π –û–°."
        print_info "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –≤—Ä—É—á–Ω—É—é: ${missing_utils[*]}"
      fi
    else
      print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –°–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç."
    fi
  else
    print_success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Ç–∏–ª–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
check_network_connectivity() {
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker Hub
  if curl -s --connect-timeout 5 https://registry.hub.docker.com/_ping > /dev/null; then
    print_success "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Docker Hub: OK"
  else
    print_warning "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Docker Hub. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–∑–æ–≤."
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GitHub (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Docker Compose)
  if curl -s --connect-timeout 5 https://api.github.com > /dev/null; then
    print_success "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GitHub: OK"
  else
    print_warning "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GitHub. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Docker Compose."
  fi
  
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Let's Encrypt (–¥–ª—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤)
  if curl -s --connect-timeout 5 https://acme-v02.api.letsencrypt.org/directory > /dev/null; then
    print_success "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Let's Encrypt: OK"
  else
    print_warning "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Let's Encrypt. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
check_port_availability() {
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
  
  local port_issues=false
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã 80 –∏ 443, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è Traefik –∏ Let's Encrypt
  for port in 80 443; do
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ $port..."
    
    # –ù–∞ Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º ss –∏–ª–∏ netstat
    if command -v ss &> /dev/null; then
      if ss -tuln | grep -q ":$port "; then
        print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π."
        port_issues=true
      else
        print_success "–ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω."
      fi
    elif command -v netstat &> /dev/null; then
      if netstat -tuln | grep -q ":$port "; then
        print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π."
        port_issues=true
      else
        print_success "–ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω."
      fi
    # –í macOS –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ lsof
    elif command -v lsof &> /dev/null; then
      if lsof -i :$port -sTCP:LISTEN &> /dev/null; then
        print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π."
        port_issues=true
      else
        print_success "–ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω."
      fi
    else
      print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ $port. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã 80 –∏ 443 –Ω–µ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏."
    fi
  done
  
  if [ "$port_issues" = true ]; then
    print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏. Traefik —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã 80 –∏ 443 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Let's Encrypt –∏ SSL."
    print_info "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É, –Ω–æ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏."
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/n): " continue_setup
    if [ "$continue_setup" != "y" ]; then
      print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
      exit 1
    fi
  fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
check_memory_requirements() {
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏..."
  
  if command -v free &> /dev/null; then
    # –ù–∞ Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º free
    total_mem=$(free -m | awk '/^Mem:/ {print $2}')
    print_info "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: ${total_mem} –ú–ë"
    
    if [ "$total_mem" -lt 4000 ]; then
      print_warning "–£ –≤–∞—Å –º–µ–Ω—å—à–µ 4 –ì–ë –ø–∞–º—è—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    elif [ "$total_mem" -lt 8000 ]; then
      print_info "–£ –≤–∞—Å 4-8 –ì–ë –ø–∞–º—è—Ç–∏. –≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    else
      print_success "–£ –≤–∞—Å –±–æ–ª–µ–µ 8 –ì–ë –ø–∞–º—è—Ç–∏. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
    fi
  elif command -v sysctl &> /dev/null && [ "$(uname)" == "Darwin" ]; then
    # –ù–∞ macOS –∏—Å–ø–æ–ª—å–∑—É–µ–º sysctl
    total_mem=$(sysctl -n hw.memsize | awk '{print int($1/1024/1024)}')
    print_info "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: ${total_mem} –ú–ë"
    
    if [ "$total_mem" -lt 4000 ]; then
      print_warning "–£ –≤–∞—Å –º–µ–Ω—å—à–µ 4 –ì–ë –ø–∞–º—è—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    elif [ "$total_mem" -lt 8000 ]; then
      print_info "–£ –≤–∞—Å 4-8 –ì–ë –ø–∞–º—è—Ç–∏. –≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    else
      print_success "–£ –≤–∞—Å –±–æ–ª–µ–µ 8 –ì–ë –ø–∞–º—è—Ç–∏. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
    fi
  else
    print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–º—è—Ç—å."
    print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4 –ì–ë –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ 8+ –ì–ë –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
  fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU —Ä–µ—Å—É—Ä—Å–æ–≤
check_cpu_resources() {
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ CPU —Ä–µ—Å—É—Ä—Å–æ–≤..."
  
  if command -v nproc &> /dev/null; then
    # –ù–∞ Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º nproc
    cpu_cores=$(nproc)
    print_info "–î–æ—Å—Ç—É–ø–Ω–æ CPU —è–¥–µ—Ä: ${cpu_cores}"
    
    if [ "$cpu_cores" -lt 2 ]; then
      print_warning "–£ –≤–∞—Å –º–µ–Ω–µ–µ 2 —è–¥–µ—Ä CPU. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    elif [ "$cpu_cores" -lt 4 ]; then
      print_info "–£ –≤–∞—Å 2-3 —è–¥—Ä–∞ CPU. –≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    else
      print_success "–£ –≤–∞—Å ${cpu_cores} —è–¥–µ—Ä CPU. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
    fi
  elif command -v sysctl &> /dev/null && [ "$(uname)" == "Darwin" ]; then
    # –ù–∞ macOS –∏—Å–ø–æ–ª—å–∑—É–µ–º sysctl
    cpu_cores=$(sysctl -n hw.ncpu)
    print_info "–î–æ—Å—Ç—É–ø–Ω–æ CPU —è–¥–µ—Ä: ${cpu_cores}"
    
    if [ "$cpu_cores" -lt 2 ]; then
      print_warning "–£ –≤–∞—Å –º–µ–Ω–µ–µ 2 —è–¥–µ—Ä CPU. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    elif [ "$cpu_cores" -lt 4 ]; then
      print_info "–£ –≤–∞—Å 2-3 —è–¥—Ä–∞ CPU. –≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."
      print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: --profile cpu"
    else
      print_success "–£ –≤–∞—Å ${cpu_cores} —è–¥–µ—Ä CPU. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
    fi
  else
    print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU —è–¥–µ—Ä."
    print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —è–¥—Ä–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∏ 4+ —è–¥—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫
create_troubleshooting_file() {
  print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫..."
  
  cat > TROUBLESHOOTING.local.md << EOF
# –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫ N8N AI Starter Kit

## –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è

### Docker –∏ Docker Compose

- **–û—à–∏–±–∫–∞ "Permission denied"**
  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker: \`sudo usermod -aG docker \$USER\`
  - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: \`newgrp docker\`

- **–ü—Ä–æ–±–ª–µ–º—ã —Å DNS –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö**
  - –°–æ–∑–¥–∞–π—Ç–µ/–∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª \`/etc/docker/daemon.json\`:
    \`\`\`json
    {
      "dns": ["8.8.8.8", "8.8.4.4"]
    }
    \`\`\`
  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker: \`sudo systemctl restart docker\`

- **–û—à–∏–±–∫–∞ "Error starting userland proxy"**
  - –ü–æ—Ä—Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã: \`netstat -tuln\` –∏–ª–∏ \`lsof -i :80\` (–¥–ª—è –ø–æ—Ä—Ç–∞ 80)

### Traefik –∏ SSL

- **–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤**
  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã 80 –∏ 443 –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞
  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ staging-—Ä–µ–∂–∏–º Let's Encrypt (–¥–æ–±–∞–≤—å—Ç–µ \`--acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory\` –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Traefik)

- **–û—à–∏–±–∫–∞ "too many certificates already issued"**
  - –£ Let's Encrypt –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω

### N8N –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã

- **N8N –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Postgres**
  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä postgres –∑–∞–ø—É—â–µ–Ω: \`docker ps | grep postgres\`
  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ postgres: \`docker logs n8n-ai-starter-kit-postgres\`

- **–ü—Ä–æ–±–ª–µ–º—ã —Å Ollama**
  - –î–ª—è —Ä–∞–±–æ—Ç—ã —Å GPU —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω nvidia-container-toolkit
  - –î–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ –≤ docker-compose.override.yml

- **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –∏–ª–∏ CPU**
  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: \`docker compose --profile cpu up -d\`
  - –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
  - –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä swap-—Ñ–∞–π–ª–∞ –≤ Linux

## –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

- –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: \`docker compose logs -f [service_name]\`
- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: \`docker compose restart [service_name]\`
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: \`docker compose ps\`
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker: \`docker network inspect n8n-ai-starter-kit_default\`
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: \`docker stats\`

## –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- GitHub: https://github.com/n8n-io/n8n
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.n8n.io/
- Telegram: https://t.me/n8n_ru

–°–æ–∑–¥–∞–Ω $(date)
EOF

  print_success "–§–∞–π–ª TROUBLESHOOTING.local.md —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Docker
check_docker_health() {
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker..."
  if ! command -v docker &> /dev/null; then
    print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH."
    return 1
  fi
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–µ–º–æ–Ω Docker
  if ! docker info &> /dev/null; then
    print_error "–î–µ–º–æ–Ω Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    if [ "$(uname)" == "Darwin" ]; then
      print_info "–î–ª—è macOS: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Docker Desktop."
    else
      print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: sudo systemctl start docker"
      print_info "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker: sudo usermod -aG docker $USER"
      print_info "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    fi
    return 1
  fi
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–≤ —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if ! docker ps &> /dev/null; then
    print_error "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Docker."
    print_info "–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker: sudo usermod -aG docker $USER"
    print_info "–ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    return 1
  fi
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–æ–≤
  if ! docker pull hello-world &> /dev/null; then
    print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ Docker Hub."
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker Hub."
    return 2
  else
    docker rmi hello-world &> /dev/null
  fi
  print_success "Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
  return 0
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
print_banner
detect_os

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Desktop –Ω–∞ macOS
if [[ "$OS_TYPE" == "macOS" && ! -x "/Applications/Docker.app/Contents/Resources/bin/docker" ]]; then
  print_error "Docker Desktop –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å https://www.docker.com/products/docker-desktop "
  exit 1
fi

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–∏–ª–∏—Ç
install_required_utils

# –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if command -v curl &> /dev/null; then
  check_network_connectivity
else
  print_warning "–ö–æ–º–∞–Ω–¥–∞ curl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
fi

if command -v docker &> /dev/null; then
  if ! check_docker_health; then
    print_error "Docker –Ω–µ –≥–æ—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
    exit 1
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
if command -v ss &> /dev/null || command -v netstat &> /dev/null || command -v lsof &> /dev/null; then
  check_port_availability
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ lsof –Ω–∞ macOS
  if [[ "$OS_TYPE" == "macOS" && ! -x "$(command -v lsof)" ]]; then
    print_warning "lsof –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é: sudo lsof -i :80"
  fi
else
  print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤ 80 –∏ 443. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏."
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_memory_requirements
check_cpu_resources

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenSSL
command -v openssl >/dev/null 2>&1 || { print_error "–¢—Ä–µ–±—É–µ—Ç—Å—è openssl, –Ω–æ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openssl –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."; exit 1; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew –Ω–∞ macOS
if [[ "$OS_TYPE" == "macOS" ]] && ! command -v brew &> /dev/null; then
  print_warning "Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh )\""
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
if ! command -v docker >/dev/null 2>&1; then
  print_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker? (y/n): "
  read install_docker

  if [ "$install_docker" = "y" ]; then
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    if [[ "$OS_TYPE" == *"Ubuntu"* ]]; then
      print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ Ubuntu..."
      
      # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
      run_with_spinner "sudo apt-get update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
      run_with_spinner "sudo apt-get install -y ca-certificates curl gnupg" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
      
      # –î–æ–±–∞–≤–∏–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π GPG –∫–ª—é—á Docker
      sudo install -m 0755 -d /etc/apt/keyrings
      run_with_spinner "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker"
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      
      # –î–æ–±–∞–≤–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      
      # –û–±–Ω–æ–≤–∏–º –±–∞–∑—É –ø–∞–∫–µ—Ç–æ–≤
      run_with_spinner "sudo apt-get update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
      
      # –£—Å—Ç–∞–Ω–æ–≤–∏–º Docker
      run_with_spinner "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
      
      # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
      run_with_spinner "sudo usermod -aG docker $USER" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker"
      
      print_success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
      print_warning "–ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    
    elif [[ "$OS_TYPE" == *"Debian"* ]]; then
      print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ Debian..."
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
      run_with_spinner "sudo apt-get update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
      run_with_spinner "sudo apt-get install -y ca-certificates curl gnupg" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
      
      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ GPG –∫–ª—é—á–∞ Docker
      sudo install -m 0755 -d /etc/apt/keyrings
      run_with_spinner "curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker"
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      
      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      
      # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –ø–∞–∫–µ—Ç–æ–≤
      run_with_spinner "sudo apt-get update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
      run_with_spinner "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
      
      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
      run_with_spinner "sudo usermod -aG docker $USER" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker"
      
      print_success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
      print_warning "–ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    
    elif [[ "$OS_TYPE" == *"CentOS"* ]] || [[ "$OS_TYPE" == *"RHEL"* ]]; then
      print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ CentOS/RHEL..."
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
      run_with_spinner "sudo yum install -y yum-utils" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ yum-utils"
      
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
      run_with_spinner "sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker"
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
      run_with_spinner "sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
      
      # –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Docker
      run_with_spinner "sudo systemctl enable docker" "–í–∫–ª—é—á–µ–Ω–∏–µ —Å–ª—É–∂–±—ã Docker"
      run_with_spinner "sudo systemctl start docker" "–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Docker"
      
      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
      run_with_spinner "sudo usermod -aG docker $USER" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker"
      
      print_success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
      print_warning "–ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    
    elif [[ "$OS_TYPE" == *"Fedora"* ]]; then
      print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ Fedora..."
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
      run_with_spinner "sudo dnf -y install dnf-plugins-core" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ dnf-plugins-core"
      
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
      run_with_spinner "sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker"
      
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
      run_with_spinner "sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
      
      # –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Docker
      run_with_spinner "sudo systemctl enable docker" "–í–∫–ª—é—á–µ–Ω–∏–µ —Å–ª—É–∂–±—ã Docker"
      run_with_spinner "sudo systemctl start docker" "–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Docker"
      
      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
      run_with_spinner "sudo usermod -aG docker $USER" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker"
      
      print_success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
      print_warning "–ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: newgrp docker"
    
    elif [[ "$OS_TYPE" == "macOS" ]]; then
      print_info "–î–ª—è macOS —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Desktop —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:"
      print_info "https://www.docker.com/products/docker-desktop"
      print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –¥–ª—è macOS –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
      exit 1
      
    else
      print_error "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤–∞—à–µ–π –û–°."
      print_info "–ü–æ—Å–µ—Ç–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç Docker –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:"
      print_info "https://docs.docker.com/engine/install/"
      exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
    if command -v docker &> /dev/null; then
      print_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker: $(docker --version)"
    else
      print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ—Å–µ—Ç–∏—Ç–µ https://docs.docker.com/engine/install/ –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
      exit 1
    fi
  else
    print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker Compose..."
if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ docker compose (–±–µ–∑ –¥–µ—Ñ–∏—Å–∞) –¥–æ—Å—Ç—É–ø–Ω–∞
  DC_CMD="docker compose"
  print_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ docker compose (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"
  compose_version=$(docker compose version | awk '{print $3}')
  if [[ "$compose_version" < "v2.23.0" ]]; then
    print_warning "–í–µ—Ä—Å–∏—è Docker Compose —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π."
  fi
elif command -v docker-compose >/dev/null 2>&1; then
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É docker-compose (—Å –¥–µ—Ñ–∏—Å–æ–º)
  DC_CMD="docker-compose"
  print_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ docker-compose (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)"
  compose_version=$(docker-compose version --short)
  if [[ "$compose_version" < "1.28.0" ]]; then
    print_warning "Docker Compose —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π."
  fi
else
  print_warning "Docker Compose –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose? (y/n)"
  read install_compose
  
  if [ "$install_compose" = "y" ]; then
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    
    if [[ "$OS_TYPE" == *"Ubuntu"* ]] || [[ "$OS_TYPE" == *"Debian"* ]]; then
      # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker —Å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º apt
      if sudo apt-get list --installed docker-ce-cli &> /dev/null; then
        print_info "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt, –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker-compose-plugin..."
        run_with_spinner "sudo apt-get update" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"
        run_with_spinner "sudo apt-get install -y docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ docker-compose-plugin"
      else
        # –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
        print_info "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Docker Compose..."
        COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        run_with_spinner "sudo curl -L \"https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose" "–ó–∞–≥—Ä—É–∑–∫–∞ Docker Compose"
        run_with_spinner "sudo chmod +x /usr/local/bin/docker-compose" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
      fi
    
    elif [[ "$OS_TYPE" == *"CentOS"* ]] || [[ "$OS_TYPE" == *"RHEL"* ]] || [[ "$OS_TYPE" == *"Fedora"* ]]; then
      # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker —Å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º yum/dnf
      if sudo yum list installed docker-ce-cli &> /dev/null || sudo dnf list installed docker-ce-cli &> /dev/null; then
        print_info "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ yum/dnf, –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker-compose-plugin..."
        if [[ "$OS_TYPE" == *"Fedora"* ]]; then
          run_with_spinner "sudo dnf install -y docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ docker-compose-plugin —á–µ—Ä–µ–∑ dnf"
        else
          run_with_spinner "sudo yum install -y docker-compose-plugin" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ docker-compose-plugin —á–µ—Ä–µ–∑ yum"
        fi
      else
        # –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
        print_info "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Docker Compose..."
        COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
        run_with_spinner "sudo curl -L \"https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose" "–ó–∞–≥—Ä—É–∑–∫–∞ Docker Compose"
        run_with_spinner "sudo chmod +x /usr/local/bin/docker-compose" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
      fi
    
    else
      # –û–±—â–∏–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –û–°
      print_info "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Docker Compose –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã..."
      COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
      run_with_spinner "sudo curl -L \"https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose" "–ó–∞–≥—Ä—É–∑–∫–∞ Docker Compose"
      run_with_spinner "sudo chmod +x /usr/local/bin/docker-compose" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    fi
    
    print_info "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É docker-compose"
    DC_CMD="docker-compose"
  else
    print_error "Docker Compose –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
    exit 1
  fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
if [ -f .env ]; then
  print_warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º .env —Ñ–∞–π–ª–µ..."
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ANON_KEY
  if grep -q "SUPABASE_ANON_KEY" .env && ! grep -q "^ANON_KEY=" .env; then
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ SUPABASE_ANON_KEY
    ANON_KEY_VALUE=$(grep -E "^SUPABASE_ANON_KEY=" .env | cut -d '=' -f2)
    echo "# ---- SUPABASE –í–ù–£–¢–†–ï–ù–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----" >> .env
    echo "ANON_KEY=$ANON_KEY_VALUE" >> .env
    print_success "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ANON_KEY –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π SUPABASE_ANON_KEY"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º SERVICE_ROLE_KEY
  if grep -q "SUPABASE_SERVICE_ROLE_KEY" .env && ! grep -q "^SERVICE_ROLE_KEY=" .env; then
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ SUPABASE_SERVICE_ROLE_KEY
    SERVICE_KEY_VALUE=$(grep -E "^SUPABASE_SERVICE_ROLE_KEY=" .env | cut -d '=' -f2)
    echo "SERVICE_ROLE_KEY=$SERVICE_KEY_VALUE" >> .env
    print_success "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è SERVICE_ROLE_KEY –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π SUPABASE_SERVICE_ROLE_KEY"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
  if grep -q "SUPABASE_JWT_SECRET" .env && ! grep -q "^JWT_SECRET=" .env; then
    JWT_SECRET_VALUE=$(grep -E "^SUPABASE_JWT_SECRET=" .env | cut -d '=' -f2)
    echo "JWT_SECRET=$JWT_SECRET_VALUE" >> .env
    print_success "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è JWT_SECRET –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π SUPABASE_JWT_SECRET"
  fi
  
  print_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é."
  read -p "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): " overwrite
  
  if [ "$overwrite" = "y" ]; then
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_existing_config
  else
    print_info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ .env"
    exit 0
  fi
fi

# –í–≤–æ–¥ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
print_info "\n--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---"
read -p "–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): " domain_name
while [ -z "$domain_name" ] || ! validate_domain_name "$domain_name"; do
  print_error "–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com)."
  read -p "–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): " domain_name
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
validate_domain_name "$domain_name"
while [ $? -ne 0 ]; do
  print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è: $domain_name"
  read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): " domain_name
  validate_domain_name "$domain_name"
done

read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–¥–ª—è Let's Encrypt –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π): " email
while [ -z "$email" ] || ! validate_email "$email"; do
  print_error "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å."
  read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–¥–ª—è Let's Encrypt –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π): " email
done

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π
print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π..."
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
postgres_pwd=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-16)
n8n_encryption_key=$(openssl rand -base64 48 | tr -cd '[:alnum:]' | cut -c1-32)
n8n_jwt_secret=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-24)
supabase_postgres_pwd=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-16)
supabase_anon_key=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-24)
supabase_service_role_key=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-24)
supabase_jwt_secret=$(openssl rand -base64 48 | tr -cd '[:alnum:]' | cut -c1-32)
jwt_expiry="3600"
logflare_api_key=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-16)
secret_key_base=$(openssl rand -base64 96 | tr -cd '[:alnum:]' | cut -c1-64)
vault_enc_key=$(openssl rand -base64 48 | tr -cd '[:alnum:]' | cut -c1-32)
pooler_tenant_id="n8n_$(openssl rand -hex 8)"
pooler_default_pool_size="20"
pooler_max_client_conn="100"
pooler_proxy_port_transaction="6543"
minio_pwd=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-16)
pgadmin_pwd=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-16)
zep_api_secret=$(openssl rand -base64 64 | tr -cd '[:alnum:]' | cut -c1-48)
grafana_pwd=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-16)
jupyter_ds_token=$(openssl rand -base64 32 | tr -cd '[:alnum:]' | cut -c1-24)
dashboard_password=$(openssl rand -base64 24 | tr -cd '[:alnum:]' | cut -c1-12)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è Traefik Dashboard
read -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Traefik (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " traefik_pwd
if [ -z "$traefik_pwd" ]; then
  print_info "–í–Ω–∏–º–∞–Ω–∏–µ: –ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è..."
  traefik_pwd=$(openssl rand -base64 24 | tr -cd '[:alnum:]' | cut -c1-12)
  print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${BOLD}$traefik_pwd${NC} (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ)"
fi
traefik_pwd_hash=$(openssl passwd -apr1 "$traefik_pwd")
if [ -z "$traefik_pwd_hash" ]; then
  print_error "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö—ç—à –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥..."
  if command -v htpasswd &> /dev/null; then
    traefik_pwd_hash=$(htpasswd -nbB admin "$traefik_pwd" | cut -d ":" -f 2)
  else
    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ö—ç—à –ø–∞—Ä–æ–ª—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ htpasswd –∏–ª–∏ openssl."
    exit 1
  fi
fi
print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—ç—à –ø–∞—Ä–æ–ª—è: $traefik_pwd_hash"

# –ó–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞ OpenAI
read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ): " openai_key

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Supabase/Storage
storage_region="us-east-1"
storage_bucket="n8n-storage"
storage_backend="file"
file_storage_path="/var/lib/storage"
file_size_limit="52428800"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
cat > .env << EOF
# =============================================
# N8N AI Starter Kit - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================================
# –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ $(date)
# –í–µ—Ä—Å–∏—è: 1.0.3

# ---- –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ----
DOMAIN_NAME=${domain_name}

# ---- POSTGRESQL ----
# Main Database –¥–ª—è n8n
POSTGRES_USER=root
POSTGRES_PASSWORD=${postgres_pwd}
POSTGRES_DB=n8n
POSTGRES_HOST=supabase-db
POSTGRES_PORT=5432

# ---- N8N –ù–ê–°–¢–†–û–ô–ö–ò ----
N8N_ENCRYPTION_KEY=${n8n_encryption_key}
N8N_USER_MANAGEMENT_JWT_SECRET=${n8n_jwt_secret}
N8N_DEFAULT_BINARY_DATA_MODE=filesystem

# ---- SUPABASE –ù–ê–°–¢–†–û–ô–ö–ò ----
SUPABASE_POSTGRES_PASSWORD=${supabase_postgres_pwd}
SUPABASE_ANON_KEY=${supabase_anon_key}
SUPABASE_SERVICE_ROLE_KEY=${supabase_service_role_key}
SUPABASE_JWT_SECRET=${supabase_jwt_secret}
JWT_SECRET=${supabase_jwt_secret}
JWT_EXPIRY=${jwt_expiry}
SECRET_KEY_BASE=${secret_key_base}
VAULT_ENC_KEY=${vault_enc_key}
POOLER_TENANT_ID=${pooler_tenant_id}
POOLER_DEFAULT_POOL_SIZE=${pooler_default_pool_size}
POOLER_MAX_CLIENT_CONN=${pooler_max_client_conn}
POOLER_PROXY_PORT_TRANSACTION=${pooler_proxy_port_transaction}
LOGFLARE_API_KEY=${logflare_api_key}
IMGPROXY_ENABLE_WEBP_DETECTION=true
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=${dashboard_password}
FUNCTIONS_VERIFY_JWT=false
SUPABASE_PUBLIC_URL=http://localhost:8000

# ---- SUPABASE STUDIO –ù–ê–°–¢–†–û–ô–ö–ò ----
STUDIO_DEFAULT_ORGANIZATION=n8n
STUDIO_DEFAULT_PROJECT=n8n-ai-project

# ---- REST API –ù–ê–°–¢–†–û–ô–ö–ò ----
PGRST_DB_SCHEMAS=public,storage,graphql_public

# ---- –ù–ê–°–¢–†–û–ô–ö–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ----
SMTP_ADMIN_EMAIL=${email}
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=smtp_user
SMTP_PASS=$(openssl rand -base64 12 | tr -d "=" | tr -d "/+")
SMTP_SENDER_NAME=N8N AI Starter Kit
SITE_URL=http://localhost:8000
API_EXTERNAL_URL=http://localhost:8000
ADDITIONAL_REDIRECT_URLS=
DISABLE_SIGNUP=false
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
ENABLE_PHONE_SIGNUP=false
ENABLE_PHONE_AUTOCONFIRM=false
ENABLE_ANONYMOUS_USERS=false
MAILER_URLPATHS_INVITE=/auth/v1/verify
MAILER_URLPATHS_CONFIRMATION=/auth/v1/verify
MAILER_URLPATHS_RECOVERY=/auth/v1/verify
MAILER_URLPATHS_EMAIL_CHANGE=/auth/v1/verify

# ---- MINIO –ù–ê–°–¢–†–û–ô–ö–ò ----
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=${minio_pwd}

# ---- PGADMIN –ù–ê–°–¢–†–û–ô–ö–ò ----
PGADMIN_DEFAULT_EMAIL=${email}
PGADMIN_DEFAULT_PASSWORD=${pgadmin_pwd}

# ---- TRAEFIK –ù–ê–°–¢–†–û–ô–ö–ò ----
ACME_EMAIL=${email}
TRAEFIK_USERNAME=admin
# –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã $ –≤ —Ö–µ—à–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Docker Compose
TRAEFIK_PASSWORD_HASHED=$(echo "${traefik_pwd_hash}" | sed 's/\$/\$\$/g')

# ---- ZEP –ù–ê–°–¢–†–û–ô–ö–ò ----
ZEP_POSTGRES_USER=postgres
ZEP_POSTGRES_PASSWORD=postgres
ZEP_POSTGRES_DB=postgres
ZEP_API_SECRET=${zep_api_secret}

# ---- GRAPHITI –ù–ê–°–¢–†–û–ô–ö–ò ----
OPENAI_API_KEY=${openai_key}
NEO4J_URI=bolt://neo4j-zep:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=zepzepzep

# ---- GRAFANA –ù–ê–°–¢–†–û–ô–ö–ò ----
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=${grafana_pwd}

# ---- JUPYTER DATA SCIENCE –ù–ê–°–¢–†–û–ô–ö–ò ----
JUPYTER_DS_TOKEN=${jupyter_ds_token}

# ---- –î–û–ú–ï–ù–´ –°–ï–†–í–ò–°–û–í ----
N8N_DOMAIN=n8n.${domain_name}
OLLAMA_DOMAIN=ollama.${domain_name}
QDRANT_DOMAIN=qdrant.${domain_name}
SUPABASE_STUDIO_DOMAIN=supabase.${domain_name}
SUPABASE_API_DOMAIN=api.supabase.${domain_name}
MINIO_API_DOMAIN=minio.${domain_name}
MINIO_CONSOLE_DOMAIN=minio-console.${domain_name}
PGADMIN_DOMAIN=pgadmin.${domain_name}
JUPYTER_DOMAIN=jupyter.${domain_name}
TRAEFIK_DASHBOARD_DOMAIN=traefik.${domain_name}
ZEP_DOMAIN=zep.${domain_name}
GRAPHITI_DOMAIN=graphiti.${domain_name}

# ---- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–û–ú–ï–ù–´ –°–ï–†–í–ò–°–û–í ----
PROMETHEUS_DOMAIN=prometheus.${domain_name}
GRAFANA_DOMAIN=grafana.${domain_name}
CADVISOR_DOMAIN=cadvisor.${domain_name}
LOKI_DOMAIN=loki.${domain_name}
KIBANA_DOMAIN=kibana.${domain_name}
JUPYTER_DS_DOMAIN=jupyter-ds.${domain_name}
LANGSMITH_DOMAIN=langsmith.${domain_name}
WANDB_DOMAIN=wandb.${domain_name}

# ---- SUPABASE VECTOR/STORAGE –ù–ê–°–¢–†–û–ô–ö–ò ----
STORAGE_REGION=${storage_region}
STORAGE_BUCKET=${storage_bucket}
STORAGE_BACKEND=${storage_backend}
FILE_STORAGE_BACKEND_PATH=${file_storage_path}
FILE_SIZE_LIMIT=${file_size_limit}

# ---- VECTOR –ù–ê–°–¢–†–û–ô–ö–ò ----
VECTOR_CONFIG_PATH=${vector_config_path}
VECTOR_LOG_LEVEL=${vector_log_level}
VECTOR_DATA_DIR=${vector_data_dir}
EOF

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è Supabase
print_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase..."
# –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
if ! grep -q "^ANON_KEY=" .env; then
  echo "# ---- SUPABASE –í–ù–£–¢–†–ï–ù–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ----" >> .env
  echo "ANON_KEY=${supabase_anon_key}" >> .env
  print_success "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ANON_KEY –Ω–∞ –æ—Å–Ω–æ–≤–µ SUPABASE_ANON_KEY"
fi
if ! grep -q "^SERVICE_ROLE_KEY=" .env; then
  echo "SERVICE_ROLE_KEY=${supabase_service_role_key}" >> .env
  print_success "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è SERVICE_ROLE_KEY –Ω–∞ –æ—Å–Ω–æ–≤–µ SUPABASE_SERVICE_ROLE_KEY"
fi

print_success "–§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏!"
print_warning "–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ .env –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫
create_troubleshooting_file

# –í–ê–ñ–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º Docker Compose –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ concurrent map writes
#export COMPOSE_PARALLEL_LIMIT=1

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
print_info "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å N8N AI Starter Kit —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:"
print_info "${BOLD}COMPOSE_PARALLEL_LIMIT=1 $DC_CMD up -d${NC}"

print_info "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞:"
print_info "${BOLD}COMPOSE_PARALLEL_LIMIT=1 $DC_CMD --profile cpu up -d${NC} - –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–º–∏ AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"
print_info "${BOLD}COMPOSE_PARALLEL_LIMIT=1 $DC_CMD --profile gpu-nvidia up -d${NC} - –ó–∞–ø—É—Å–∫ —Å NVIDIA GPU AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"
print_info "${BOLD}COMPOSE_PARALLEL_LIMIT=1 $DC_CMD --profile gpu-amd up -d${NC} - –ó–∞–ø—É—Å–∫ —Å AMD GPU AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"

print_info "\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç start.sh –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:"
print_info "${BOLD}./scripts/start.sh cpu${NC} - –ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–º–∏ AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"
print_info "${BOLD}./scripts/start.sh gpu-nvidia${NC} - –ó–∞–ø—É—Å–∫ —Å NVIDIA GPU AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"
print_info "${BOLD}./scripts/start.sh gpu-amd${NC} - –ó–∞–ø—É—Å–∫ —Å AMD GPU AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏"

print_info "\n–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º –±—É–¥–µ—Ç –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
print_info "N8N: https://n8n.${domain_name}"
print_info "Ollama: https://ollama.${domain_name}"
print_info "Qdrant: https://qdrant.${domain_name}"
print_info "Traefik Dashboard: https://traefik.${domain_name}"

print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
print_info "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/n8n-io/n8n-ai-starter-kit"
