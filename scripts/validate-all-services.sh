#!/bin/bash

# =============================================================================
# üîç –ü–û–õ–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –í–°–ï–• –°–ï–†–í–ò–°–û–í N8N AI STARTER KIT
# =============================================================================
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –∏—Ö –ª–æ–≥–∏, healthcheck'–∏ –∏ API

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏
check_result() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1 - OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 - FAILED${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint'–∞
check_http() {
    local url=$1
    local service=$2
    local expected_text=$3
    
    echo -n "–ü—Ä–æ–≤–µ—Ä—è–µ–º $service ($url)... "
    
    if curl -s --max-time 10 "$url" > /dev/null 2>&1; then
        if [ -n "$expected_text" ]; then
            response=$(curl -s --max-time 10 "$url")
            if echo "$response" | grep -q "$expected_text"; then
                echo -e "${GREEN}‚úÖ OK${NC} (—Å–æ–¥–µ—Ä–∂–∏—Ç: $expected_text)"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï${NC} (–æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç)"
            fi
        else
            echo -e "${GREEN}‚úÖ OK${NC}"
        fi
        return 0
    else
        echo -e "${RED}‚ùå FAILED${NC}"
        return 1
    fi
}

print_header "üê≥ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}\n"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
echo "üìã –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:"
docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

print_header "üîç –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• –°–ï–†–í–ò–°–û–í"

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
SERVICES=("n8n" "postgres" "qdrant" "minio" "traefik")

for service in "${SERVICES[@]}"; do
    echo -n "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $service... "
    
    if docker ps --format "{{.Names}}" | grep -q "^${service}$\|_${service}_\|${service}_"; then
        container_name=$(docker ps --format "{{.Names}}" | grep "${service}" | head -1)
        status=$(docker ps --filter "name=${service}" --format "{{.Status}}")
        
        if echo "$status" | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ –ó–∞–ø—É—â–µ–Ω${NC} ($status)"
        else
            echo -e "${RED}‚ùå –ü—Ä–æ–±–ª–µ–º–∞${NC} ($status)"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
done

print_header "üîç –ü–†–û–í–ï–†–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –°–ï–†–í–ò–°–û–í"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
OPTIONAL_SERVICES=("ollama" "graphiti" "zep" "neo4j" "pgadmin" "jupyterlab")

for service in "${OPTIONAL_SERVICES[@]}"; do
    echo -n "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $service... "
    
    if docker ps --format "{{.Names}}" | grep -q "${service}"; then
        container_name=$(docker ps --format "{{.Names}}" | grep "${service}" | head -1)
        status=$(docker ps --filter "name=${service}" --format "{{.Status}}")
        
        if echo "$status" | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ –ó–∞–ø—É—â–µ–Ω${NC} ($status)"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞${NC} ($status)"
        fi
    else
        echo -e "${BLUE}‚ÑπÔ∏è  –ù–µ –∑–∞–ø—É—â–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)${NC}"
    fi
done

print_header "üåê –ü–†–û–í–ï–†–ö–ê HTTP API ENDPOINTS"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP endpoints
check_http "http://localhost:5678" "N8N Web UI" "n8n.io"
check_http "http://localhost:11434" "Ollama API" "Ollama is running"
check_http "http://localhost:6333" "Qdrant API" "qdrant"
check_http "http://localhost:9000/minio/health/live" "MinIO Health" ""
check_http "http://localhost:8080" "Traefik Dashboard" ""

print_header "üîç –ü–†–û–í–ï–†–ö–ê HEALTHCHECK –°–¢–ê–¢–£–°–û–í"

echo "üìä Healthcheck —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
for container in $(docker ps --format "{{.Names}}"); do
    health=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "none")
    if [ "$health" = "healthy" ]; then
        echo -e "${GREEN}‚úÖ $container: healthy${NC}"
    elif [ "$health" = "unhealthy" ]; then
        echo -e "${RED}‚ùå $container: unhealthy${NC}"
    elif [ "$health" = "starting" ]; then
        echo -e "${YELLOW}‚è≥ $container: starting${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  $container: no healthcheck${NC}"
    fi
done

print_header "üìã –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –ù–ê –û–®–ò–ë–ö–ò"

echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫..."
for container in $(docker ps --format "{{.Names}}"); do
    echo -n "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ $container... "
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
    logs=$(docker logs --tail 50 "$container" 2>&1)
    
    # –ò—â–µ–º –æ—à–∏–±–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
    errors=$(echo "$logs" | grep -i -E "(error|fatal|exception|failed|panic)" | grep -v -i -E "(warning|info|debug|deprecated)" | wc -l)
    
    if [ "$errors" -gt 0 ]; then
        echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω–æ $errors –æ—à–∏–±–æ–∫${NC}"
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
        echo "$logs" | grep -i -E "(error|fatal|exception|failed|panic)" | grep -v -i -E "(warning|info|debug|deprecated)" | tail -3
        echo ""
    else
        echo -e "${GREEN}‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"
    fi
done

print_header "üîß –ü–†–û–í–ï–†–ö–ê –†–ï–°–£–†–°–û–í –ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"

echo "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏:"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"

print_header "üåê –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–´–• –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô"

echo "üîó Docker —Å–µ—Ç–∏:"
docker network ls

echo -e "\nüîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Å–µ—Ç—è—Ö:"
for network in $(docker network ls --format "{{.Name}}" | grep -v "bridge\|host\|none"); do
    echo "–°–µ—Ç—å: $network"
    docker network inspect "$network" --format "{{range .Containers}}  - {{.Name}}: {{.IPv4Address}}{{end}}" 2>/dev/null || echo "  (–ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"
done

print_header "üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢"

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
total_containers=$(docker ps | wc -l)
running_containers=$((total_containers - 1)) # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
healthy_containers=$(docker ps --format "{{.Names}}" | xargs -I {} docker inspect --format='{{.State.Health.Status}}' {} 2>/dev/null | grep -c "healthy" || echo "0")

echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
echo -e "  –í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${BLUE}$running_containers${NC}"
echo -e "  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å healthy —Å—Ç–∞—Ç—É—Å–æ–º: ${GREEN}$healthy_containers${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
critical_services=("n8n" "postgres")
critical_ok=true

for service in "${critical_services[@]}"; do
    if ! docker ps --format "{{.Names}}" | grep -q "${service}"; then
        critical_ok=false
        echo -e "${RED}‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
    fi
done

if [ "$critical_ok" = true ]; then
    echo -e "\n${GREEN}üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢!${NC}"
    echo -e "${GREEN}‚úÖ N8N AI Starter Kit –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é${NC}"
else
    echo -e "\n${RED}‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ö–†–ò–¢–ò–ß–ù–´–ú–ò –°–ï–†–í–ò–°–ê–ú–ò!${NC}"
    echo -e "${YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d${NC}"
fi

print_header "üîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø"

echo "üìù –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:"
echo "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart <service>"
echo "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: docker-compose logs <service>"
echo "3. –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose down && docker-compose up -d"
echo "4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ N8N+PostgreSQL: ./scripts/diagnose-n8n-postgres.sh"
echo "5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ./scripts/monitor-n8n.sh"

echo -e "\n${GREEN}üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
