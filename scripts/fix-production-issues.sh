#!/bin/bash

# =============================================
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º N8N AI Starter Kit
# =============================================

set -e

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ template.env"
    exit 1
fi

# 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º N8N encryption key mismatch
echo "üîë –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ N8N encryption key..."
if docker volume ls | grep -q "n8n-ai-starter-kit_n8n_storage"; then
    echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ n8n volume –¥–ª—è —Å–±—Ä–æ—Å–∞ encryption key..."
    docker compose down -v --remove-orphans 2>/dev/null || true
    docker volume rm n8n-ai-starter-kit_n8n_storage 2>/dev/null || true
fi

# 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π encryption key –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if grep -q "thCylTG+CZZ+49tGDS2FmOpca1Cc2oc1N2Mb+C4jeXY=" .env; then
    NEW_KEY=$(openssl rand -base64 32)
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ N8N_ENCRYPTION_KEY –≤ .env..."
    sed -i "s/N8N_ENCRYPTION_KEY=.*/N8N_ENCRYPTION_KEY=${NEW_KEY}/" .env
fi

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API key
if ! grep -q "^OPENAI_API_KEY=" .env || grep -q "your_openai_api_key_here" .env; then
    echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã Graphiti –∏ –¥—Ä—É–≥–∏—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "   sed -i 's/OPENAI_API_KEY=.*/OPENAI_API_KEY=your_actual_key/' .env"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Neo4j –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if ! grep -q "^NEO4J_URI=" .env; then
    echo "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Neo4j –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
    echo "" >> .env
    echo "# ---- NEO4J –ù–ê–°–¢–†–û–ô–ö–ò ----" >> .env
    echo "NEO4J_URI=bolt://neo4j-zep:7687" >> .env
    echo "NEO4J_USER=neo4j" >> .env
    echo "NEO4J_PASSWORD=zepzepzep" >> .env
fi

# 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose down --remove-orphans 2>/dev/null || true
docker compose -f compose/zep-compose.yaml down --remove-orphans 2>/dev/null || true
docker compose -f compose/supabase-compose.yml down --remove-orphans 2>/dev/null || true

# 5. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö volume'–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö volumes..."
docker volume rm n8n-ai-starter-kit_postgres_storage 2>/dev/null || true
docker volume rm n8n-ai-starter-kit_n8n_storage 2>/dev/null || true

# 6. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose up -d postgres traefik n8n qdrant ollama

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL..."
for i in {1..30}; do
    if docker compose exec postgres pg_isready -U root -d n8n >/dev/null 2>&1; then
        echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"
        break
    fi
    echo "   –ü–æ–ø—ã—Ç–∫–∞ $i/30..."
    sleep 2
done

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ N8N
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ N8N..."
for i in {1..60}; do
    if curl -s http://localhost:5678 >/dev/null 2>&1; then
        echo "‚úÖ N8N –≥–æ—Ç–æ–≤"
        break
    fi
    echo "   –ü–æ–ø—ã—Ç–∫–∞ $i/60..."
    sleep 2
done

echo ""
echo "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "   N8N: http://localhost:5678"
echo "   Qdrant: http://localhost:6333"
echo "   Ollama: http://localhost:11434"
echo ""
echo "üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (Zep, Graphiti):"
echo "   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ .env"
echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker compose -f compose/zep-compose.yaml up -d"
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ./scripts/comprehensive-container-check.sh"
