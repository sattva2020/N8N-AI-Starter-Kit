# N8N AI Starter Kit - Production Deployment Script (PowerShell)
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å SSL –¥–ª—è Windows

param(
  [Parameter(Position = 0)]
  [ValidateSet("deploy", "stop", "restart", "logs", "status")]
  [string]$Action = "deploy"
)

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Info {
  param([string]$Message)
  Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Warn {
  param([string]$Message)
  Write-Host "[WARN] $Message" -ForegroundColor Yellow
}

function Write-Error {
  param([string]$Message)
  Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Write-Success {
  param([string]$Message)
  Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è .env.production
function Test-ProductionEnv {
  if (-not (Test-Path ".env.production")) {
    Write-Warn ".env.production –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    Write-Info "–°–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞ .env.production.template..."
        
    if (Test-Path ".env.production.template") {
      Copy-Item ".env.production.template" ".env.production"
      Write-Warn "‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env.production –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
      Write-Info "–ò–∑–º–µ–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:"
      Write-Host "  - DOMAIN_NAME=yourdomain.com"
      Write-Host "  - ACME_EMAIL=admin@yourdomain.com"  
      Write-Host "  - –í—Å–µ –ø–∞—Ä–æ–ª–∏ CHANGE_THIS_*"
      Write-Host ""
      Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ .env.production"
    }
    else {
      Write-Error "–§–∞–π–ª .env.production.template –Ω–µ –Ω–∞–π–¥–µ–Ω!"
      exit 1
    }
  }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∏ –¥–æ–º–µ–Ω–æ–≤
function Test-DNS {
  Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    
  $envVars = @{}
  Get-Content ".env.production" | ForEach-Object {
    if ($_ -match "^([^#][^=]+)=(.*)$") {
      $envVars[$matches[1]] = $matches[2]
    }
  }
    
  if ($envVars["DOMAIN_NAME"] -eq "yourdomain.com") {
    Write-Error "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –≤ .env.production"
    exit 1
  }
    
  Write-Info "–î–æ–º–µ–Ω: $($envVars['DOMAIN_NAME'])"
  Write-Info "N8N: $($envVars['N8N_DOMAIN'])"
  Write-Info "Web Interface: $($envVars['WEB_INTERFACE_DOMAIN'])"
  Write-Info "API: $($envVars['DOCUMENT_PROCESSOR_DOMAIN'])"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
function Test-Ports {
  Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ 80 –∏ 443..."
    
  $port80 = Get-NetTCPConnection -LocalPort 80 -ErrorAction SilentlyContinue
  $port443 = Get-NetTCPConnection -LocalPort 443 -ErrorAction SilentlyContinue
    
  if ($port80) {
    Write-Warn "–ü–æ—Ä—Ç 80 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
  }
    
  if ($port443) {
    Write-Warn "–ü–æ—Ä—Ç 443 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
  }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function New-Directories {
  Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
  $directories = @(
    ".\data\uploads",
    ".\data\processed", 
    ".\config\traefik\dynamic"
  )
    
  foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
      New-Item -ItemType Directory -Path $dir -Force | Out-Null
    }
  }
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ development —Å–µ—Ä–≤–∏—Å–æ–≤
function Stop-Development {
  Write-Info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ development —Å–µ—Ä–≤–∏—Å–æ–≤..."
  docker-compose --profile default --profile cpu --profile developer down
}

# –ó–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–∏—Å–æ–≤
function Start-Production {
  Write-Info "–ó–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–∏—Å–æ–≤ —Å SSL..."
    
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º production environment
  docker-compose --env-file .env.production --profile production up -d
    
  Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
  Start-Sleep 30
    
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
  docker-compose --env-file .env.production --profile production ps
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
function Test-SSL {
  Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
  $envVars = @{}
  Get-Content ".env.production" | ForEach-Object {
    if ($_ -match "^([^#][^=]+)=(.*)$") {
      $envVars[$matches[1]] = $matches[2]
    }
  }
    
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
  $domains = @($envVars["N8N_DOMAIN"], $envVars["WEB_INTERFACE_DOMAIN"], $envVars["DOCUMENT_PROCESSOR_DOMAIN"])
    
  foreach ($domain in $domains) {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $domain..."
    try {
      $response = Invoke-WebRequest -Uri "https://$domain/health" -UseBasicParsing -TimeoutSec 10
      if ($response.StatusCode -eq 200) {
        Write-Success "‚úÖ $domain –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ HTTPS"
      }
      else {
        Write-Warn "‚ö†Ô∏è  $domain –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: $($response.StatusCode))"
      }
    }
    catch {
      Write-Warn "‚ö†Ô∏è  $domain –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
  }
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
function Show-DeploymentInfo {
  Write-Success "üéâ Production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
  Write-Host ""
  Write-Host "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö:"
    
  $envVars = @{}
  Get-Content ".env.production" | ForEach-Object {
    if ($_ -match "^([^#][^=]+)=(.*)$") {
      $envVars[$matches[1]] = $matches[2]
    }
  }
    
  Write-Host "‚îú‚îÄ‚îÄ ü§ñ N8N Workflow Automation: https://$($envVars['N8N_DOMAIN'])"
  Write-Host "‚îú‚îÄ‚îÄ üåê Web Interface: https://$($envVars['WEB_INTERFACE_DOMAIN'])"  
  Write-Host "‚îú‚îÄ‚îÄ üîå Document Processor API: https://$($envVars['DOCUMENT_PROCESSOR_DOMAIN'])"
  Write-Host "‚îú‚îÄ‚îÄ üìä Traefik Dashboard: https://$($envVars['TRAEFIK_DASHBOARD_DOMAIN'])"
  Write-Host "‚îî‚îÄ‚îÄ üóÑÔ∏è  Database Admin: https://$($envVars['PGADMIN_DOMAIN'])"
  Write-Host ""
  Write-Host "üîê SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: Let's Encrypt (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)"
  Write-Host "üîí Security headers: –í–∫–ª—é—á–µ–Ω—ã"
  Write-Host "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –î–æ—Å—Ç—É–ø–µ–Ω –≤ Traefik Dashboard"
  Write-Host ""
  Write-Info "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose --env-file .env.production logs -f"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
function Invoke-Deploy {
  Write-Host ""
  Write-Info "–ù–∞—á–∏–Ω–∞—é production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."
    
  Test-ProductionEnv
  Test-DNS
  Test-Ports
  New-Directories
  Stop-Development
  Start-Production
    
  Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
  Start-Sleep 60
    
  Test-SSL
  Show-DeploymentInfo
}

# –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
Write-Host "üöÄ N8N AI Starter Kit - Production Deployment" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

switch ($Action) {
  "deploy" {
    Invoke-Deploy
  }
  "stop" {
    Write-Info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ production —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose --env-file .env.production --profile production down
    Write-Success "Production —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
  }
  "restart" {
    Write-Info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose --env-file .env.production --profile production restart
  }
  "logs" {
    docker-compose --env-file .env.production --profile production logs -f
  }
  "status" {
    docker-compose --env-file .env.production --profile production ps
  }
  default {
    Write-Host "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\deploy-production.ps1 [deploy|stop|restart|logs|status]"
    Write-Host ""
    Write-Host "–ö–æ–º–∞–Ω–¥—ã:"
    Write-Host "  deploy   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å production —Å SSL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    Write-Host "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production —Å–µ—Ä–≤–∏—Å—ã"
    Write-Host "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å production —Å–µ—Ä–≤–∏—Å—ã" 
    Write-Host "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ production —Å–µ—Ä–≤–∏—Å–æ–≤"
    Write-Host "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å production —Å–µ—Ä–≤–∏—Å–æ–≤"
  }
}
