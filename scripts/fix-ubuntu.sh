#!/bin/bash

# üîß N8N AI Starter Kit - –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 22.06.2025

set -e

PROJECT_DIR="$HOME/N8N-AI-Starter-Kit"
LOG_FILE="/tmp/n8n-kit-fix.log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
}

check_directory() {
    if [ ! -d "$PROJECT_DIR" ]; then
        error "–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
        error "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É"
        exit 1
    fi
    cd "$PROJECT_DIR"
}

diagnose_services() {
    log "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Docker Compose
    if ! docker compose ps > /dev/null 2>&1; then
        error "Docker Compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
    docker compose ps --format "table {{.Service}}\t{{.Status}}" | tee -a "$LOG_FILE"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å unhealthy —Å–µ—Ä–≤–∏—Å—ã
    UNHEALTHY=$(docker compose ps --filter "health=unhealthy" --format "{{.Service}}")
    if [ -n "$UNHEALTHY" ]; then
        warning "–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–¥–æ—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã: $UNHEALTHY"
        return 1
    fi
    
    return 0
}

fix_env_file() {
    log "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    
    if [ ! -f ".env" ]; then
        warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É—é –∏–∑ template.env"
        cp template.env .env
    fi
    
    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å POSTGRES_USER –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if ! grep -q "POSTGRES_USER=postgres" .env; then
        log "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ POSTGRES_USER –≤ .env..."
        sed -i 's/POSTGRES_USER=.*/POSTGRES_USER=postgres/' .env
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    REQUIRED_VARS=("POSTGRES_PASSWORD" "N8N_ENCRYPTION_KEY" "POSTGRES_DB")
    for var in "${REQUIRED_VARS[@]}"; do
        if ! grep -q "$var=" .env; then
            warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –≤ .env —Ñ–∞–π–ª–µ"
        fi
    done
}

fix_n8n_encryption() {
    log "üîê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å N8N encryption key..."
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å encryption key
    if docker compose logs n8n 2>/dev/null | grep -q "Mismatching encryption keys"; then
        warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å encryption key"
        
        # –ü–æ–ª—É—á–∏—Ç—å encryption key –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ N8N
        if docker compose ps | grep -q "n8n.*Up"; then
            CONTAINER_KEY=$(docker exec n8n-ai-starter-kit-n8n-1 cat /home/node/.n8n/config 2>/dev/null | grep -o '"encryptionKey":"[^"]*"' | cut -d'"' -f4 || true)
            
            if [ -n "$CONTAINER_KEY" ]; then
                log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ N8N_ENCRYPTION_KEY –≤ .env —Ñ–∞–π–ª–µ..."
                sed -i "s/N8N_ENCRYPTION_KEY=.*/N8N_ENCRYPTION_KEY=$CONTAINER_KEY/" .env
            else
                warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å encryption key –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
                log "–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ N8N (–ø–æ—Ç–µ—Ä—è –Ω–∞—Å—Ç—Ä–æ–µ–∫!)..."
                docker compose down
                docker volume rm n8n-ai-starter-kit_n8n_storage 2>/dev/null || true
            fi
        fi
    fi
}

fix_services_step_by_step() {
    log "üöÄ –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker compose down
    
    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    log "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker compose rm -f n8n x-service-n8n ollama 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (traefik, postgres, minio)..."
    docker compose up -d traefik postgres minio
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    if ! docker compose ps | grep -E "(traefik|postgres|minio)" | grep -q "Up"; then
        error "–ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ Qdrant
    log "–ó–∞–ø—É—Å–∫ Qdrant..."
    docker compose up -d qdrant
    sleep 10
    
    # –ó–∞–ø—É—Å–∫ Ollama
    log "–ó–∞–ø—É—Å–∫ Ollama..."
    docker compose up -d ollama
    sleep 15
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama API..."
    if docker exec ollama curl -f http://localhost:11434/api/tags >/dev/null 2>&1; then
        success "Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
    
    # –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log "–ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker compose --profile cpu up -d
    sleep 20
}

check_final_status() {
    log "üèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    
    docker compose ps
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoints
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."
    
    # Qdrant
    if curl -s http://localhost:6333/ >/dev/null; then
        success "‚úÖ Qdrant API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "‚ùå Qdrant API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # Ollama
    if curl -s http://localhost:11434/api/tags >/dev/null; then
        success "‚úÖ Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "‚ùå Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü–æ–¥—Å—á–µ—Ç healthy —Å–µ—Ä–≤–∏—Å–æ–≤
    TOTAL=$(docker compose ps | grep -c "Up" || true)
    HEALTHY=$(docker compose ps | grep -c "healthy" || true)
    
    log "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: $HEALTHY/$TOTAL —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ healthy —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
}

main() {
    log "üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ N8N AI Starter Kit..."
    log "üìã –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: $LOG_FILE"
    
    check_directory
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if diagnose_services; then
        success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
        return 0
    fi
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fix_env_file
    fix_n8n_encryption
    fix_services_step_by_step
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    check_final_status
    
    success "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    log "üìã –ü–æ–ª–Ω—ã–π –ª–æ–≥: $LOG_FILE"
    log "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/UBUNTU_UPDATE_GUIDE.md"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
