#!/bin/bash
# filepath: e:\AI\n8n-ai-starter-kit\scripts\healthcheck.sh
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ N8N AI Starter Kit
# –í–µ—Ä—Å–∏—è: 1.0.6

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ N8N AI Starter Kit ===${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å–µ—Ä–≤–∏—Å–∞
check_http_service() {
    local name="$1"
    local url="$2"
    local expected_code="${3:-200}"
    
    if command -v curl &> /dev/null; then
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
        if [ "$response_code" = "$expected_code" ]; then
            echo -e "  ${GREEN}‚úÖ $name: –î–æ—Å—Ç—É–ø–µ–Ω (HTTP $response_code)${NC}"
            return 0
        else
            echo -e "  ${RED}‚ùå $name: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $response_code)${NC}"
            return 1
        fi
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è $name: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (curl –Ω–µ –Ω–∞–π–¥–µ–Ω)${NC}"
        return 2
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TCP –ø–æ—Ä—Ç–∞
check_tcp_port() {
    local name="$1"
    local host="$2"
    local port="$3"
    
    if command -v nc &> /dev/null; then
        if nc -z "$host" "$port" 2>/dev/null; then
            echo -e "  ${GREEN}‚úÖ $name: –ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            return 0
        else
            echo -e "  ${RED}‚ùå $name: –ü–æ—Ä—Ç $port –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            return 1
        fi
    elif command -v telnet &> /dev/null; then
        if timeout 3 telnet "$host" "$port" 2>/dev/null | grep -q "Connected"; then
            echo -e "  ${GREEN}‚úÖ $name: –ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            return 0
        else
            echo -e "  ${RED}‚ùå $name: –ü–æ—Ä—Ç $port –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            return 1
        fi
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è $name: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç (nc/telnet –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)${NC}"
        return 2
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Docker
check_docker_container() {
    local name="$1"
    local container_name="$2"
    
    if docker ps --filter "name=$container_name" --filter "status=running" --format "{{.Names}}" 2>/dev/null | grep -q "$container_name"; then
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        status=$(docker ps --filter "name=$container_name" --format "{{.Status}}" 2>/dev/null)
        echo -e "  ${GREEN}‚úÖ $name: –ó–∞–ø—É—â–µ–Ω ($status)${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å healthcheck
        health=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}no-healthcheck{{end}}' "$container_name" 2>/dev/null)
        if [ "$health" = "healthy" ]; then
            echo -e "     ${GREEN}üíö Healthcheck: –ó–¥–æ—Ä–æ–≤${NC}"
        elif [ "$health" = "unhealthy" ]; then
            echo -e "     ${RED}üíî Healthcheck: –ù–µ–∑–¥–æ—Ä–æ–≤${NC}"
        elif [ "$health" = "starting" ]; then
            echo -e "     ${YELLOW}üü° Healthcheck: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è${NC}"
        fi
        
        return 0
    elif docker ps -a --filter "name=$container_name" --format "{{.Names}}" 2>/dev/null | grep -q "$container_name"; then
        status=$(docker ps -a --filter "name=$container_name" --format "{{.Status}}" 2>/dev/null)
        echo -e "  ${RED}‚ùå $name: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($status)${NC}"
        return 1
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è $name: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 2
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API Ollama
check_ollama_api() {
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ API Ollama...${NC}"
    
    if check_http_service "Ollama API" "http://localhost:11434/api/version"; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if command -v curl &> /dev/null; then
            models=$(curl -s "http://localhost:11434/api/tags" 2>/dev/null | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | wc -l)
            if [ "$models" -gt 0 ]; then
                echo -e "     ${GREEN}üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: $models${NC}"
            else
                echo -e "     ${YELLOW}üì¶ –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã${NC}"
            fi
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Qdrant
check_qdrant_api() {
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant...${NC}"
    
    if check_http_service "Qdrant API" "http://localhost:6333/health"; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        if command -v curl &> /dev/null; then
            collections=$(curl -s "http://localhost:6333/collections" 2>/dev/null | grep -o '"name":"[^"]*"' | wc -l)
            echo -e "     ${GREEN}üóÉÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏–π: $collections${NC}"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker...${NC}"
check_docker_container "N8N" "n8n-ai-starter-kit-n8n-1"
check_docker_container "PostgreSQL" "n8n-ai-starter-kit-postgres-1"
check_docker_container "Traefik" "n8n-ai-starter-kit-traefik-1"
check_docker_container "Ollama" "n8n-ai-starter-kit-ollama-1"
check_docker_container "Qdrant" "n8n-ai-starter-kit-qdrant-1"
check_docker_container "Zep" "n8n-ai-starter-kit-zep-1"

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
check_http_service "N8N Web UI" "http://localhost:5678"
check_http_service "Traefik Dashboard" "http://localhost:8080"
check_http_service "Qdrant Dashboard" "http://localhost:6333/dashboard"

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–∏—Å–æ–≤
check_ollama_api
echo ""
check_qdrant_api

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ—Ä—Ç–æ–≤
echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...${NC}"
check_tcp_port "N8N HTTP" "localhost" "5678"
check_tcp_port "Traefik HTTP" "localhost" "80"
check_tcp_port "Traefik HTTPS" "localhost" "443"
check_tcp_port "Traefik Dashboard" "localhost" "8080"
check_tcp_port "Qdrant HTTP" "localhost" "6333"
check_tcp_port "Qdrant gRPC" "localhost" "6334"
check_tcp_port "Ollama API" "localhost" "11434"

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
important_files=(".env" "docker-compose.yml" "scripts/setup.sh")
for file in "${important_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "  ${GREEN}‚úÖ $file: –ù–∞–π–¥–µ–Ω${NC}"
    else
        echo -e "  ${RED}‚ùå $file: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤
echo ""
echo -e "${BLUE}–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö...${NC}"
if [ -d "logs" ]; then
    log_size=$(du -sh logs 2>/dev/null | cut -f1)
    echo -e "  üìã –õ–æ–≥–∏: $log_size"
fi

if [ -d "n8n" ]; then
    n8n_size=$(du -sh n8n 2>/dev/null | cut -f1)
    echo -e "  üîß –î–∞–Ω–Ω—ã–µ N8N: $n8n_size"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Docker volumes
echo ""
echo -e "${BLUE}Docker volumes...${NC}"
if command -v docker &> /dev/null; then
    docker volume ls --filter "name=n8n-ai-starter-kit" --format "table {{.Name}}\t{{.Size}}" 2>/dev/null | \
    while IFS= read -r line; do
        if [[ "$line" =~ "NAME" ]]; then
            echo -e "  ${BLUE}$line${NC}"
        else
            echo -e "  ${GREEN}üíæ $line${NC}"
        fi
    done
fi

echo ""

# –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
echo -e "${BLUE}=== –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è ===${NC}"

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
total_checks=15
healthy_services=$(docker ps --filter "name=n8n-ai-starter-kit" --filter "status=running" -q | wc -l)

if [ "$healthy_services" -gt 4 ]; then
    echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ! ($healthy_services/6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ)${NC}"
elif [ "$healthy_services" -gt 2 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ($healthy_services/6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ)${NC}"
    echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"
else
    echo -e "${RED}‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º ($healthy_services/6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ)${NC}"
    echo -e "${RED}–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: ./scripts/diagnose.sh${NC}"
fi

echo ""
echo -e "${BLUE}–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:${NC}"
echo -e "  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${YELLOW}./scripts/monitor.sh${NC}"
echo -e "  üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${YELLOW}./scripts/diagnose.sh${NC}"
echo -e "  üìù –õ–æ–≥–∏: ${YELLOW}docker logs <container_name>${NC}"