#!/bin/bash
# Comprehensive Container Validation Script
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç COMPREHENSIVE CONTAINER VALIDATION${NC}"
echo "=================================================================="
echo -e "–î–∞—Ç–∞: $(date)"
echo -e "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_status() {
    local container_name=$1
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${container_name}${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if ! docker ps -a --format "table {{.Names}}" | grep -q "^${container_name}$"; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}\n"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    local status=$(docker inspect --format='{{.State.Status}}' ${container_name} 2>/dev/null)
    local health=$(docker inspect --format='{{.State.Health.Status}}' ${container_name} 2>/dev/null || echo "no-healthcheck")
    local exit_code=$(docker inspect --format='{{.State.ExitCode}}' ${container_name} 2>/dev/null)
    local started_at=$(docker inspect --format='{{.State.StartedAt}}' ${container_name} 2>/dev/null)
    
    echo "   üìä –°—Ç–∞—Ç—É—Å: ${status}"
    echo "   üè• Health: ${health}"
    echo "   üì§ Exit Code: ${exit_code}"
    echo "   üïê –ó–∞–ø—É—â–µ–Ω: ${started_at}"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if [[ "$status" == "running" ]]; then
        if [[ "$health" == "healthy" ]] || [[ "$health" == "no-healthcheck" ]]; then
            echo -e "   ${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
            return 0
        else
            echo -e "   ${RED}‚ùå Health check failed: ${health}${NC}"
            return 1
        fi
    else
        echo -e "   ${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: ${status}${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
analyze_container_logs() {
    local container_name=$1
    local lines=${2:-50}
    
    echo -e "${BLUE}üìã –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${container_name} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${lines} —Å—Ç—Ä–æ–∫)${NC}"
    
    if ! docker ps -a --format "table {{.Names}}" | grep -q "^${container_name}$"; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}\n"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏ –∏—â–µ–º –æ—à–∏–±–∫–∏
    local logs=$(docker logs ${container_name} --tail ${lines} 2>&1)
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    local error_patterns=(
        "ERROR"
        "FATAL"
        "CRITICAL"
        "Exception"
        "Traceback"
        "failed"
        "Failed"
        "error"
        "Error"
        "panic"
        "PANIC"
        "Connection refused"
        "Connection reset"
        "timeout"
        "Timeout"
        "permission denied"
        "Permission denied"
        "No such file"
        "not found"
        "Not found"
        "unhealthy"
        "Unhealthy"
    )
    
    local found_errors=0
    
    for pattern in "${error_patterns[@]}"; do
        local matches=$(echo "$logs" | grep -i "$pattern" | head -5)
        if [[ -n "$matches" ]]; then
            if [[ $found_errors -eq 0 ]]; then
                echo -e "   ${RED}üö® –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:${NC}"
                found_errors=1
            fi
            echo -e "   ${RED}‚ñ∂ $pattern:${NC}"
            echo "$matches" | sed 's/^/     /'
        fi
    done
    
    if [[ $found_errors -eq 0 ]]; then
        echo -e "   ${GREEN}‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"
    fi
    
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_service_ports() {
    echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤${NC}"
    
    local services=(
        "5678:N8N"
        "11434:Ollama"
        "6333:Qdrant"
        "5432:PostgreSQL"
        "9000:MinIO"
        "8080:Traefik"
        "8001:Graphiti"
    )
    
    for service in "${services[@]}"; do
        local port=$(echo $service | cut -d':' -f1)
        local name=$(echo $service | cut -d':' -f2)
        
        echo -n "   üîå ${name} (port ${port}): "
        
        if command -v curl >/dev/null 2>&1; then
            if curl -s --connect-timeout 5 "http://localhost:${port}" >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω${NC}"
            else
                echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            fi
        elif command -v nc >/dev/null 2>&1; then
            if nc -z localhost ${port} 2>/dev/null; then
                echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç${NC}"
            else
                echo -e "${RED}‚ùå –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏${NC}"
        fi
    done
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Docker
docker_system_info() {
    echo -e "${BLUE}üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker${NC}"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local total_containers=$(docker ps -a -q | wc -l)
    local running_containers=$(docker ps -q | wc -l)
    local stopped_containers=$((total_containers - running_containers))
    
    echo "   üì¶ –í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${total_containers}"
    echo "   ‚ñ∂Ô∏è  –ó–∞–ø—É—â–µ–Ω–æ: ${running_containers}"
    echo "   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${stopped_containers}"
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo -e "   üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ Docker:"
    docker system df --format "table {{.Type}}\t{{.Total}}\t{{.Active}}\t{{.Size}}" | sed 's/^/     /'
    
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
main() {
    echo -e "${BLUE}üèÅ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...${NC}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker
    if ! docker info >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        exit 1
    fi
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    docker_system_info
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    echo -e "${BLUE}üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
    local project_containers=(
        "n8n-ai-starter-kit-n8n-1"
        "n8n-ai-starter-kit-postgres-1" 
        "n8n-ai-starter-kit-ollama-1"
        "n8n-ai-starter-kit-qdrant-1"
        "n8n-ai-starter-kit-minio-1"
        "n8n-ai-starter-kit-traefik-1"
        "n8n-ai-starter-kit-graphiti-1"
        "n8n-ai-starter-kit-zep-1"
        "n8n-ai-starter-kit-neo4j-1"
    )
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local auto_containers=$(docker ps -a --filter "label=com.docker.compose.project=n8n-ai-starter-kit" --format "{{.Names}}" 2>/dev/null | sort)
    
    if [[ -n "$auto_containers" ]]; then
        echo -e "   üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:"
        echo "$auto_containers" | sed 's/^/     /'
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
        local all_containers=$(echo -e "${project_containers[*]}\n$auto_containers" | tr ' ' '\n' | sort -u)
    else
        echo -e "   üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        local all_containers=$(printf '%s\n' "${project_containers[@]}")
    fi
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    local total_checked=0
    local healthy_count=0
    local error_count=0
    
    while IFS= read -r container; do
        [[ -z "$container" ]] && continue
        
        echo "=================================================================="
        total_checked=$((total_checked + 1))
        
        if check_container_status "$container"; then
            healthy_count=$((healthy_count + 1))
            analyze_container_logs "$container" 30
        else
            error_count=$((error_count + 1))
            echo -e "${RED}üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã...${NC}"
            analyze_container_logs "$container" 50
        fi
        
    done <<< "$all_containers"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    echo "=================================================================="
    check_service_ports
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo "=================================================================="
    echo -e "${BLUE}üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê${NC}"
    echo "   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${total_checked}"
    echo -e "   ${GREEN}‚úÖ –†–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${healthy_count}${NC}"
    echo -e "   ${RED}‚ùå –° –æ—à–∏–±–∫–∞–º–∏: ${error_count}${NC}"
    
    if [[ $error_count -eq 0 ]]; then
        echo -e "\n${GREEN}üéâ –í–°–ï –ö–û–ù–¢–ï–ô–ù–ï–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!${NC}"
        exit 0
    else
        echo -e "\n${RED}‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í ${error_count} –ö–û–ù–¢–ï–ô–ù–ï–†–ê–•${NC}"
        echo -e "${YELLOW}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
        echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        echo "   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏"
        echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é docker-compose.yml"
        echo "   4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main "$@"
