#!/bin/bash

# Analytics Stack Health Check Script
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Analytics Stack"
echo "===================================="

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_service() {
    local service_name=$1
    local url=$2
    local expected_response=${3:-"200"}
    
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service_name... "
    
    if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "$expected_response"; then
        echo -e "${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

check_clickhouse() {
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ ClickHouse... "
    
    if curl -s http://localhost:8123/ | grep -q "Ok."; then
        echo -e "${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        echo -n "  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö n8n_analytics... "
        if curl -s "http://localhost:8123/?query=SELECT%201%20FROM%20system.databases%20WHERE%20name='n8n_analytics'" | grep -q "1"; then
            echo -e "${GREEN}‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        echo -n "  - –¢–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏... "
        tables_count=$(curl -s "http://localhost:8123/?query=SELECT%20count()%20FROM%20system.tables%20WHERE%20database='n8n_analytics'" 2>/dev/null || echo "0")
        if [ "$tables_count" -gt "0" ]; then
            echo -e "${GREEN}‚úÖ $tables_count —Ç–∞–±–ª–∏—Ü${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã${NC}"
        fi
        
        return 0
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

check_container() {
    local container_name=$1
    echo -n "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container_name... "
    
    if docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
        local status=$(docker inspect --format="{{.State.Health.Status}}" "$container_name" 2>/dev/null || echo "unknown")
        case $status in
            "healthy")
                echo -e "${GREEN}‚úÖ –ó–¥–æ—Ä–æ–≤${NC}"
                return 0
                ;;
            "starting")
                echo -e "${YELLOW}üîÑ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è${NC}"
                return 1
                ;;
            "unhealthy")
                echo -e "${RED}‚ùå –ù–µ–∑–¥–æ—Ä–æ–≤${NC}"
                return 1
                ;;
            "unknown")
                echo -e "${BLUE}‚ÑπÔ∏è  –†–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ health check)${NC}"
                return 0
                ;;
            *)
                echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ($status)${NC}"
                return 1
                ;;
        esac
    else
        echo -e "${RED}‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
}

# –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
echo "========================"

check_container "n8n_clickhouse"
check_container "n8n_superset"
check_container "n8n_analytics_postgres"
check_container "n8n_analytics_redis"
check_container "n8n_etl_processor"
check_container "n8n_analytics_api"

echo ""
echo "üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤:"
echo "=========================="

# ClickHouse
check_clickhouse

# Superset
check_service "Superset" "http://localhost:8088/health"

# Analytics API
if check_service "Analytics API" "http://localhost:8089/health"; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    echo -n "  - Metrics endpoint... "
    if curl -s http://localhost:8089/metrics | head -1 | grep -q "^#"; then
        echo -e "${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
fi

# ETL Processor
if check_service "ETL Processor" "http://localhost:8080/health"; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ETL
    echo -n "  - ETL Status... "
    if curl -s http://localhost:8080/status | grep -q "status"; then
        echo -e "${GREEN}‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
fi

echo ""
echo "üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–µ–π:"
echo "=================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker networks
networks=("n8n_analytics_network" "n8n_network" "n8n_monitoring_network")
for network in "${networks[@]}"; do
    echo -n "–°–µ—Ç—å $network... "
    if docker network ls | grep -q "$network"; then
        echo -e "${GREEN}‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    else
        echo -e "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
    fi
done

echo ""
echo "üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:"
echo "======================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ volumes
volumes=("clickhouse_data" "superset_data" "postgres_analytics_data" "redis_analytics_data")
for volume in "${volumes[@]}"; do
    echo -n "Volume $volume... "
    if docker volume ls | grep -q "$volume"; then
        echo -e "${GREEN}‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    else
        echo -e "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -n "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö... "
missing_dirs=()
for dir in data/clickhouse data/superset data/postgres-analytics data/redis-analytics; do
    if [ ! -d "$dir" ]; then
        missing_dirs+=("$dir")
    fi
done

if [ ${#missing_dirs[@]} -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing_dirs[*]}${NC}"
fi

echo ""
echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
echo "==========================="

# Docker stats –¥–ª—è Analytics –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
if command -v docker &> /dev/null; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" \
        n8n_clickhouse n8n_superset n8n_analytics_postgres n8n_analytics_redis n8n_etl_processor n8n_analytics_api 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
fi

echo ""
echo "üìã –°–≤–æ–¥–∫–∞:"
echo "========="

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
total_checks=0
successful_checks=0

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö URL
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
urls=(
    "http://localhost:8088|Superset Dashboard"
    "http://localhost:8089|Analytics API"
    "http://localhost:8089/docs|API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    "http://localhost:8080|ETL Processor"
    "http://localhost:8123|ClickHouse HTTP"
)

for url_info in "${urls[@]}"; do
    IFS='|' read -r url description <<< "$url_info"
    echo -n "  - $description: "
    if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "200\|302"; then
        echo -e "${GREEN}‚úÖ $url${NC}"
        ((successful_checks++))
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    fi
    ((total_checks++))
done

echo ""
if [ $successful_checks -eq $total_checks ]; then
    echo -e "${GREEN}üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã Analytics Stack —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ($successful_checks/$total_checks)${NC}"
    exit 0
elif [ $successful_checks -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: $successful_checks/$total_checks —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã${NC}"
    exit 1
else
    echo -e "${RED}‚ùå Analytics Stack –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    exit 2
fi
