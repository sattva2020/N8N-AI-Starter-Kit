#!/bin/bash

# ==================================================
# N8N AI Starter Kit - Ubuntu Update Script
# ==================================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Ubuntu
# –í–µ—Ä—Å–∏—è: 1.0
# –î–∞—Ç–∞: 22.06.2025

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PROJECT_DIR="$(pwd)"
BACKUP_DIR="$HOME/n8n-backups/$(date +%Y%m%d_%H%M%S)"
PROFILE="${1:-cpu}"  # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ 'cpu' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

echo "üöÄ N8N AI Starter Kit - –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Ubuntu"
echo "=================================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.yml" ]; then
    print_error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    exit 1
fi

if ! command -v git &> /dev/null; then
    print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    exit 1
fi

print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: $PROFILE"
print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: $BACKUP_DIR"

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
read -p "ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_warning "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
    exit 0
fi

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose down
print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# 2. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p "$BACKUP_DIR"

# –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f ".env" ]; then
    cp .env "$BACKUP_DIR/"
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
fi

# –ë—ç–∫–∞–ø Docker volumes (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
VOLUMES=$(docker volume ls -q | grep n8n-ai-starter-kit || true)
if [ ! -z "$VOLUMES" ]; then
    for volume in $VOLUMES; do
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ volume: $volume"
        docker run --rm \
            -v "$volume":/data \
            -v "$BACKUP_DIR":/backup \
            alpine tar czf "/backup/${volume}.tar.gz" -C /data . 2>/dev/null || true
    done
    print_success "–ë—ç–∫–∞–ø volumes —Å–æ–∑–¥–∞–Ω"
else
    print_warning "Docker volumes –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫?)"
fi

# 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π Git..."
if ! git diff-index --quiet HEAD --; then
    git stash push -m "Auto-backup before update $(date)"
    print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Git stash"
else
    print_info "–õ–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
fi

# 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
git fetch origin main

# –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
CHANGES=$(git log --oneline HEAD..origin/main | wc -l)
if [ "$CHANGES" -gt 0 ]; then
    print_info "–ù–∞–π–¥–µ–Ω–æ $CHANGES –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤:"
    git log --oneline HEAD..origin/main | head -5
    
    read -p "ü§î –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        exit 0
    fi
    
    git pull origin main
    print_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
else
    print_info "–ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env..."
if [ ! -f ".env" ]; then
    if [ -f "template.env" ]; then
        cp template.env .env
        print_warning "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ template.env. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"
    else
        print_error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ template.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ template.env
if [ -f "template.env" ] && [ -f ".env" ]; then
    NEW_VARS=$(comm -23 <(grep -o '^[A-Z_]*=' template.env | sort) <(grep -o '^[A-Z_]*=' .env | sort) || true)
    if [ ! -z "$NEW_VARS" ]; then
        print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ template.env:"
        echo "$NEW_VARS"
        print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª"
    fi
fi

# 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
docker compose pull
print_success "Docker –æ–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

# 7. –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
print_info "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º '$PROFILE'..."
docker compose --profile "$PROFILE" up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks
UNHEALTHY=$(docker compose ps --format json | jq -r 'select(.Health == "unhealthy") | .Service' 2>/dev/null || true)
if [ ! -z "$UNHEALTHY" ]; then
    print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å unhealthy:"
    echo "$UNHEALTHY"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs [service_name]"
else
    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
fi

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."

# Qdrant
if curl -s http://localhost:6333/ > /dev/null 2>&1; then
    print_success "Qdrant API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    print_warning "Qdrant API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è)"
fi

# Ollama
if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
    print_success "Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    print_warning "Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω)"
fi

# 10. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo
echo "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "=================================================="
print_success "–ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $BACKUP_DIR"
print_info "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker compose logs"
print_info "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: docker compose ps"

# –ü–æ–∫–∞–∑–∞—Ç—å URL –¥–æ—Å—Ç—É–ø–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–æ–º–µ–Ω—ã)
if [ -f ".env" ]; then
    DOMAIN=$(grep "^DOMAIN_NAME=" .env | cut -d'=' -f2 | tr -d '"' || echo "localhost")
    if [ "$DOMAIN" != "localhost" ]; then
        print_info "–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:"
        echo "  N8N: https://n8n.$DOMAIN"
        echo "  Qdrant: https://qdrant.$DOMAIN"
        echo "  Traefik: https://traefik.$DOMAIN"
    fi
fi

echo
print_success "N8N AI Starter Kit —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! üöÄ"
