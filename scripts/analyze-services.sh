#!/bin/bash

# N8N AI Starter Kit - Service Dependency Analyzer
# –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

log_question() {
    echo -e "${CYAN}[?]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
analyze_config_files() {
    echo "=============================================="
    echo "üìã –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í"
    echo "=============================================="
    
    # –ê–Ω–∞–ª–∏–∑ docker-compose.yml
    if [[ -f "docker-compose.yml" ]]; then
        log_info "–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ docker-compose.yml..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        local services=$(grep -E "^  [a-zA-Z0-9_-]+:" docker-compose.yml | sed 's/://g' | sed 's/^  //')
        
        echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        for service in $services; do
            echo "  - $service"
        done
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
        echo
        log_info "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏..."
        
        if grep -q "depends_on:" docker-compose.yml; then
            echo "–Ø–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
            grep -A 5 "depends_on:" docker-compose.yml | grep -E "^\s*-" | sed 's/^.*- /  /'
        fi
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö compose —Ñ–∞–π–ª–æ–≤
    echo
    log_info "–ê–Ω–∞–ª–∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö compose —Ñ–∞–π–ª–æ–≤..."
    
    for compose_file in compose/*.yml; do
        if [[ -f "$compose_file" ]]; then
            local filename=$(basename "$compose_file")
            local services=$(grep -E "^  [a-zA-Z0-9_-]+:" "$compose_file" 2>/dev/null | wc -l || echo "0")
            echo "  - $filename: $services —Å–µ—Ä–≤–∏—Å–æ–≤"
        fi
    done
}

# –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
analyze_environment() {
    echo
    echo "=============================================="
    echo "üîß –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø"
    echo "=============================================="
    
    if [[ -f ".env" ]]; then
        log_info "–ê–Ω–∞–ª–∏–∑ .env —Ñ–∞–π–ª–∞..."
        
        # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤:"
        
        if grep -q "QDRANT" .env; then
            echo "  ‚úì Qdrant: –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            echo "  ‚úó Qdrant: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        fi
        
        if grep -q "SUPABASE" .env; then
            echo "  ‚úì Supabase: –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            echo "  ‚úó Supabase: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        fi
        
        if grep -q "OLLAMA" .env; then
            echo "  ‚úì Ollama: –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            echo "  ‚úó Ollama: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        fi
        
        if grep -q "MINIO" .env; then
            log_warning "MinIO: –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª—ë–Ω)"
        else
            echo "  ‚úì MinIO: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (—É–¥–∞–ª—ë–Ω)"
        fi
    else
        log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ê–Ω–∞–ª–∏–∑ workflows
analyze_workflows() {
    echo
    echo "=============================================="
    echo "üìä –ê–ù–ê–õ–ò–ó N8N WORKFLOWS"
    echo "=============================================="
    
    local workflow_dir="data/n8n-workflows"
    
    if [[ -d "$workflow_dir" ]] && [[ "$(ls -A $workflow_dir 2>/dev/null)" ]]; then
        log_info "–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö workflows..."
        
        local workflow_files=$(find "$workflow_dir" -name "*.json" 2>/dev/null | wc -l)
        echo "–ù–∞–π–¥–µ–Ω–æ workflow —Ñ–∞–π–ª–æ–≤: $workflow_files"
        
        if (( workflow_files > 0 )); then
            echo
            echo "–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ workflows:"
            
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π AI —Å–µ—Ä–≤–∏—Å–æ–≤
            local ai_usage=$(find "$workflow_dir" -name "*.json" -exec grep -l -i "ollama\|openai\|anthropic\|gpt\|llama" {} \; 2>/dev/null | wc -l)
            echo "  - AI —Å–µ—Ä–≤–∏—Å—ã (Ollama/OpenAI): $ai_usage workflows"
            
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –ë–î
            local vector_usage=$(find "$workflow_dir" -name "*.json" -exec grep -l -i "qdrant\|pinecone\|weaviate\|vector" {} \; 2>/dev/null | wc -l)
            echo "  - –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –ë–î (Qdrant): $vector_usage workflows"
            
            # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π Supabase
            local supabase_usage=$(find "$workflow_dir" -name "*.json" -exec grep -l -i "supabase" {} \; 2>/dev/null | wc -l)
            echo "  - Supabase: $supabase_usage workflows"
        fi
    else
        log_info "Workflows –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
analyze_system_resources() {
    echo
    echo "=============================================="
    echo "üíª –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–´–• –†–ï–°–£–†–°–û–í"
    echo "=============================================="
    
    # RAM
    local ram_total_gb=$(free -g | awk '/^Mem:/{print $2}')
    local ram_available_gb=$(free -g | awk '/^Mem:/{print $7}')
    echo "–ü–∞–º—è—Ç—å:"
    echo "  - –í—Å–µ–≥–æ: ${ram_total_gb}GB"
    echo "  - –î–æ—Å—Ç—É–ø–Ω–æ: ${ram_available_gb}GB"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞–º—è—Ç–∏
    if (( ram_total_gb >= 16 )); then
        log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    elif (( ram_total_gb >= 8 )); then
        log_warning "–ü–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–æ–≤"
    else
        log_error "–ú–∞–ª–æ –ø–∞–º—è—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    fi
    
    # CPU
    local cpu_cores=$(nproc)
    echo "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:"
    echo "  - –Ø–¥–µ—Ä: $cpu_cores"
    
    if (( cpu_cores >= 8 )); then
        log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CPU –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–∫–ª—é—á–∞—è AI"
    elif (( cpu_cores >= 4 )); then
        log_warning "CPU –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. AI —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ"
    else
        log_warning "–ú–∞–ª–æ CPU —è–¥–µ—Ä. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    fi
    
    # –î–∏—Å–∫
    local disk_available_gb=$(df -BG . | awk 'NR==2{sub(/G/, "", $4); print $4}')
    echo "–î–∏—Å–∫:"
    echo "  - –î–æ—Å—Ç—É–ø–Ω–æ: ${disk_available_gb}GB"
    
    if (( disk_available_gb >= 50 )); then
        log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π"
    elif (( disk_available_gb >= 20 )); then
        log_warning "–ú–µ—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –í—ã–±–æ—Ä–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–µ–π"
    else
        log_error "–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interactive_survey() {
    echo
    echo "=============================================="
    echo "‚ùì –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –û–ü–†–û–°"
    echo "=============================================="
    
    local answers=()
    
    echo "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
    echo
    
    # –í–æ–ø—Ä–æ—Å 1: –¢–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    log_question "1. –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è N8N?"
    echo "   a) –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–µ–∑ AI"
    echo "   b) –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ AI"
    echo "   c) –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å AI –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (a/b/c): " usage_type
    answers+=("usage_type:$usage_type")
    
    # –í–æ–ø—Ä–æ—Å 2: AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    log_question "2. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI —Ñ—É–Ω–∫—Ü–∏–∏?"
    echo "   a) –ù–µ—Ç, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
    echo "   b) –î–∞, —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API (OpenAI, Anthropic)"
    echo "   c) –î–∞, –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (Ollama)"
    echo "   d) –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (API + –ª–æ–∫–∞–ª—å–Ω—ã–µ)"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (a/b/c/d): " ai_usage
    answers+=("ai_usage:$ai_usage")
    
    # –í–æ–ø—Ä–æ—Å 3: –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    log_question "3. –ù—É–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (embeddings, semantic search)?"
    echo "   a) –ù–µ—Ç"
    echo "   b) –î–∞, –ø–ª–∞–Ω–∏—Ä—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
    echo "   c) –ù–µ —É–≤–µ—Ä–µ–Ω"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (a/b/c): " vector_usage
    answers+=("vector_usage:$vector_usage")
    
    # –í–æ–ø—Ä–æ—Å 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ë–î
    log_question "4. –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ë–î –∫—Ä–æ–º–µ PostgreSQL?"
    echo "   a) –ù–µ—Ç, PostgreSQL –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    echo "   b) –î–∞, –ø–ª–∞–Ω–∏—Ä—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Supabase"
    echo "   c) –ù–µ —É–≤–µ—Ä–µ–Ω –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (a/b/c): " db_usage
    answers+=("db_usage:$db_usage")
    
    # –í–æ–ø—Ä–æ—Å 5: –ù–∞–≥—Ä—É–∑–∫–∞
    log_question "5. –û–∂–∏–¥–∞–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞?"
    echo "   a) –ù–∏–∑–∫–∞—è (development/testing)"
    echo "   b) –°—Ä–µ–¥–Ω—è—è (small production)"
    echo "   c) –í—ã—Å–æ–∫–∞—è (enterprise)"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (a/b/c): " load_level
    answers+=("load_level:$load_level")
    
    echo "${answers[@]}"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
generate_recommendations() {
    local answers=("$@")
    
    echo
    echo "=============================================="
    echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò"
    echo "=============================================="
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤
    local usage_type=""
    local ai_usage=""
    local vector_usage=""
    local db_usage=""
    local load_level=""
    
    for answer in "${answers[@]}"; do
        case $answer in
            usage_type:*) usage_type="${answer#*:}" ;;
            ai_usage:*) ai_usage="${answer#*:}" ;;
            vector_usage:*) vector_usage="${answer#*:}" ;;
            db_usage:*) db_usage="${answer#*:}" ;;
            load_level:*) load_level="${answer#*:}" ;;
        esac
    done
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    local ram_total_gb=$(free -g | awk '/^Mem:/{print $2}')
    local cpu_cores=$(nproc)
    
    echo "üìã –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:"
    echo
    
    # –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã)
    log_success "–ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
    echo "  ‚úì N8N - –æ—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
    echo "  ‚úì PostgreSQL - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    echo "  ‚úì Traefik - reverse proxy"
    
    # Qdrant
    echo
    if [[ "$ai_usage" =~ ^[cd]$ ]] || [[ "$vector_usage" == "b" ]]; then
        log_success "Qdrant (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):"
        echo "  ‚úì –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ AI"
        echo "  ‚úì Semantic search, embeddings, RAG"
        
        if (( ram_total_gb < 8 )); then
            log_warning "  ‚ö† –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏"
        fi
    else
        log_info "Qdrant (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"
        echo "  ‚óã –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á"
        echo "  ‚óã –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    fi
    
    # Ollama
    echo
    if [[ "$ai_usage" =~ ^[cd]$ ]]; then
        if (( ram_total_gb >= 8 && cpu_cores >= 4 )); then
            log_success "Ollama (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):"
            echo "  ‚úì –õ–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏"
            echo "  ‚úì –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã"
            
            if (( ram_total_gb >= 16 )); then
                echo "  ‚úì –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏ (7B+)"
            else
                echo "  ‚ö† –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ (1-3B)"
            fi
        elif (( ram_total_gb >= 4 && cpu_cores >= 2 )); then
            log_warning "Ollama (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):"
            echo "  ‚ö† –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            echo "  ‚úì –ü—Ä–æ—Ñ–∏–ª—å test-ai —Å –ª–∏–º–∏—Ç–æ–º 4GB –ø–∞–º—è—Ç–∏"
            echo "  ‚ö† –¢–æ–ª—å–∫–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ (phi-3-mini, llama3.2:1b)"
        else
            log_warning "Ollama (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ):"
            echo "  ‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
            echo "  ‚ö† –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ AI API"
        fi
    else
        log_info "Ollama (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):"
        echo "  ‚óã –õ–æ–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è"
        echo "  ‚óã –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
    fi
    
    # Supabase
    echo
    if [[ "$db_usage" == "b" ]]; then
        log_warning "Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"
        echo "  ‚óã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î"
        echo "  ‚óã Auth, Storage, Realtime"
        echo "  ‚ö† –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    else
        log_info "Supabase (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):"
        echo "  ‚óã PostgreSQL –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
        echo "  ‚óã –£–ø—Ä–æ—â–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
    fi
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
    echo
    echo "üöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:"
    echo
    
    if [[ "$usage_type" == "a" ]] && [[ "$ai_usage" == "a" ]]; then
        log_success "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        echo "  docker compose --profile default up -d n8n postgres traefik"
        
    elif [[ "$ai_usage" =~ ^[cd]$ ]] && (( ram_total_gb >= 8 )); then
        log_success "–ü–æ–ª–Ω–∞—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        echo "  docker compose --profile default --profile cpu up -d"
        
    elif [[ "$ai_usage" =~ ^[cd]$ ]] && (( ram_total_gb >= 4 && ram_total_gb < 8 )); then
        log_warning "–¢–µ—Å—Ç–æ–≤–∞—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        echo "  docker compose --profile default --profile test-ai up -d"
        echo "  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI"
        
    else
        log_success "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        echo "  docker compose --profile default up -d"
        
        if [[ "$vector_usage" == "b" ]]; then
            echo "  # –î–æ–±–∞–≤–∏—Ç—å Qdrant:"
            echo "  docker compose up -d qdrant"
        fi
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo
    echo "üìö –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
    echo
    
    if (( ram_total_gb < 8 && ram_total_gb >= 4 )); then
        log_warning "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:"
        echo "  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å test-ai –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI"
        echo "  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ swap –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
        echo "  - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
        echo "  - –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ (phi-3-mini, llama3.2:1b)"
        echo "  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ RAM –¥–æ 8GB+ –¥–ª—è production"
    elif (( ram_total_gb < 4 )); then
        log_warning "–ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        echo "  - –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI —Å–µ—Ä–≤–∏—Å—ã"
        echo "  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ swap –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
        echo "  - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
        echo "  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ RAM –¥–æ 8GB+"
    fi
    
    if [[ "$load_level" == "c" ]]; then
        log_info "Production –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:"
        echo "  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–µ –ë–î –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"
        echo "  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
    fi
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    echo "  - –ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "  - –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ"
    echo "  - –î–ª—è AI: —Å–Ω–∞—á–∞–ª–∞ test-ai –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ—Ç–æ–º cpu –ø—Ä–æ—Ñ–∏–ª—å"
    echo "  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./scripts/ubuntu-vm-deploy.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
create_config_files() {
    local answers=("$@")
    
    echo
    echo "=============================================="
    echo "üìù –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í"
    echo "=============================================="
    
    # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.override.yml –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    local has_ai=false
    local has_vector=false
    
    for answer in "${answers[@]}"; do
        case $answer in
            ai_usage:[cd]) has_ai=true ;;
            vector_usage:b) has_vector=true ;;
        esac
    done
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    cat > quick-start.sh << 'EOF'
#!/bin/bash

# Quick Start Script - Generated by Service Analyzer
# –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
PROFILES="default"

EOF
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è AI
    local ram_total_gb=$(free -g 2>/dev/null | awk '/^Mem:/{print $2}' || echo "0")
    
    if [[ "$has_ai" == true ]]; then
        if (( ram_total_gb >= 8 )); then
            echo 'PROFILES="$PROFILES cpu"' >> quick-start.sh
            echo 'echo "‚úì –ü–æ–ª–Ω–∞—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (8GB+ RAM)"' >> quick-start.sh
        elif (( ram_total_gb >= 4 )); then
            echo 'PROFILES="$PROFILES test-ai"' >> quick-start.sh
            echo 'echo "‚ö† –¢–µ—Å—Ç–æ–≤–∞—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã)"' >> quick-start.sh
        else
            echo 'echo "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"' >> quick-start.sh
        fi
    fi
    
    if [[ "$has_vector" == true ]]; then
        echo '# –î–æ–±–∞–≤–ª—è–µ–º Qdrant –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ã' >> quick-start.sh
        echo 'if [[ $(free -g | awk "/^Mem:/{print \$2}") -ge 6 ]]; then' >> quick-start.sh
        echo '    echo "‚úì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Qdrant"' >> quick-start.sh
        echo '    docker compose up -d qdrant' >> quick-start.sh
        echo 'else' >> quick-start.sh
        echo '    echo "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è Qdrant, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"' >> quick-start.sh
        echo 'fi' >> quick-start.sh
    fi
    
    cat >> quick-start.sh << 'EOF'

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π: $PROFILES"
docker compose --profile $PROFILES up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
docker compose ps

echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
echo "üåê N8N –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$(hostname -I | awk '{print $1}'):5678"
EOF
    
    chmod +x quick-start.sh
    
    log_success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: quick-start.sh"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "=============================================="
    echo "üîç N8N AI STARTER KIT - –ê–ù–ê–õ–ò–ó –°–ï–†–í–ò–°–û–í"
    echo "=============================================="
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞."
        exit 1
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
    analyze_config_files
    analyze_environment
    analyze_workflows
    analyze_system_resources
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
    local answers=$(interactive_survey)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generate_recommendations $answers
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    create_config_files $answers
    
    echo
    echo "=============================================="
    echo "‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù"
    echo "=============================================="
    echo
    log_success "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"
    log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./quick-start.sh –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    log_info "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/UBUNTU_VM_DEPLOYMENT.md"
}

# –ó–∞–ø—É—Å–∫
main "$@"
