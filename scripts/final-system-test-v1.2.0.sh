#!/bin/bash

# üß™ Final System Test –¥–ª—è n8n-ai-starter-kit v1.2.0
# ===================================================
# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Advanced RAG Pipeline –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

echo "üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ n8n-ai-starter-kit v1.2.0..."
echo "============================================================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SUCCESS_COUNT=0
TOTAL_TESTS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
log_test() {
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    else
        echo -e "${RED}‚ùå $1${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service_status() {
    local service_name=$1
    local expected_status=${2:-"healthy"}
    
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: $service_name${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
    status_line=$(docker-compose ps --format="table {{.Service}}\t{{.Status}}" | grep "$service_name" | cut -f2)
    
    if [[ "$status_line" == *"$expected_status"* ]] && [[ "$status_line" == *"Up"* ]]; then
        log_test "–°–µ—Ä–≤–∏—Å $service_name –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å $expected_status"
        return 0
    elif [[ "$status_line" == *"Up"* ]]; then
        log_test "–°–µ—Ä–≤–∏—Å $service_name –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: $status_line)"
        return 0
    else
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å $service_name –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: $status_line (–æ–∂–∏–¥–∞–ª—Å—è: Up + $expected_status)${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoint
check_api_endpoint() {
    local url=$1
    local description=$2
    local expected_code=${3:-200}
    
    echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint: $url${NC}"
    
    response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
    
    if [ "$response_code" = "$expected_code" ]; then
        log_test "$description (HTTP $response_code)"
        return 0
    else
        echo -e "${RED}‚ùå $description (HTTP $response_code, –æ–∂–∏–¥–∞–ª—Å—è: $expected_code)${NC}"
        return 1
    fi
}

echo -e "${YELLOW}üìã 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
echo "============================================"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
check_service_status "document-processor" "healthy"
check_service_status "web-interface" "healthy"
check_service_status "postgres" "healthy"
check_service_status "neo4j" "healthy"
check_service_status "ollama" "healthy"

echo
echo -e "${YELLOW}üìã 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints...${NC}"
echo "==============================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
check_api_endpoint "http://localhost:8001/health" "Document Processor Health Check"
check_api_endpoint "http://localhost:8001/" "Document Processor Root"
check_api_endpoint "http://localhost:8001/docs" "Document Processor Swagger UI"

check_api_endpoint "http://localhost:8002/health" "Web Interface Health Check"
check_api_endpoint "http://localhost:8002/" "Web Interface Root"

check_api_endpoint "http://localhost:6333/" "Qdrant Health Check"

check_api_endpoint "http://localhost:11434/" "Ollama API"

echo
echo -e "${YELLOW}üìã 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...${NC}"
echo "=============================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é document-processor -> qdrant
echo -e "${BLUE}üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Document Processor —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏${NC}"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º search endpoint document-processor
search_response=$(curl -s -X POST "http://localhost:8001/documents/search" \
    -H "Content-Type: application/json" \
    -d '{"query": "test", "limit": 5}' || echo "error")

if [[ "$search_response" != "error" ]] && [[ "$search_response" == *"results"* ]]; then
    log_test "Document Processor –ø–æ–∏—Å–∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo -e "${RED}‚ùå Document Processor –ø–æ–∏—Å–∫ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å${NC}"

web_interface_content=$(curl -s "http://localhost:8002/" || echo "error")

if [[ "$web_interface_content" != "error" ]] && [[ "$web_interface_content" == *"html"* ]]; then
    log_test "Web Interface –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç"
else
    echo -e "${RED}‚ùå Web Interface –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç${NC}"
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
fi

echo
echo -e "${YELLOW}üìã 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...${NC}"
echo "============================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è cpu –∑–∞–ø—É—â–µ–Ω—ã
expected_services=("document-processor" "web-interface" "postgres" "ollama")

for service in "${expected_services[@]}"; do
    if docker-compose ps "$service" | grep -q "Up"; then
        log_test "–°–µ—Ä–≤–∏—Å $service –∑–∞–ø—É—â–µ–Ω –≤ Docker Compose"
    else
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ Docker Compose${NC}"
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
    fi
done

echo
echo -e "${YELLOW}üìã 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
echo "==========================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
key_paths=(
    "services/document-processor/app.py"
    "services/document-processor/requirements.txt"
    "services/document-processor/Dockerfile"
    "services/web-interface/app.py"
    "services/web-interface/requirements.txt" 
    "services/web-interface/Dockerfile"
    "docker-compose.yml"
    ".env"
    "data/uploads"
    "data/processed"
)

for path in "${key_paths[@]}"; do
    if [ -e "$path" ]; then
        log_test "–§–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $path"
    else
        echo -e "${RED}‚ùå –§–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $path${NC}"
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
    fi
done

echo
echo -e "${YELLOW}üìã 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏...${NC}"
echo "==============================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
echo -e "${BLUE}üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ document-processor...${NC}"
doc_processor_errors=$(docker-compose logs document-processor | grep -i "error\|exception\|traceback" | wc -l)

if [ "$doc_processor_errors" -eq 0 ]; then
    log_test "Document Processor: –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
else
    echo -e "${RED}‚ùå Document Processor: –Ω–∞–π–¥–µ–Ω–æ $doc_processor_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö${NC}"
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
fi

echo -e "${BLUE}üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ web-interface...${NC}"
web_interface_errors=$(docker-compose logs web-interface | grep -i "error\|exception\|traceback" | wc -l)

if [ "$web_interface_errors" -eq 0 ]; then
    log_test "Web Interface: –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
else
    echo -e "${RED}‚ùå Web Interface: –Ω–∞–π–¥–µ–Ω–æ $web_interface_errors –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö${NC}"
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
fi

echo
echo "============================================================================"
echo -e "${BLUE}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:${NC}"
echo "============================================================================"

SUCCESS_RATE=$(echo "scale=1; $SUCCESS_COUNT * 100 / $TOTAL_TESTS" | bc -l 2>/dev/null || echo "0")

echo -e "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${GREEN}$SUCCESS_COUNT${NC} –∏–∑ $TOTAL_TESTS"
echo -e "üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${GREEN}$SUCCESS_RATE%${NC}"

if [ "$SUCCESS_COUNT" -eq "$TOTAL_TESTS" ]; then
    echo
    echo -e "${GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${NC}"
    echo -e "${GREEN}üöÄ n8n-ai-starter-kit v1.2.0 –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!${NC}"
    echo
    echo -e "${BLUE}üìã Advanced RAG Pipeline –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω:${NC}"
    echo "‚Ä¢ ‚úÖ Document Processor API (http://localhost:8001)"
    echo "‚Ä¢ ‚úÖ Web Interface (http://localhost:8002)"
    echo "‚Ä¢ ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (Qdrant)"
    echo "‚Ä¢ ‚úÖ AI –º–æ–¥–µ–ª–∏ (Ollama)"
    echo "‚Ä¢ ‚úÖ –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π (Neo4j + Graphiti)"
    echo "‚Ä¢ ‚úÖ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    echo
    exit 0
else
    failed_tests=$((TOTAL_TESTS - SUCCESS_COUNT))
    echo
    echo -e "${RED}‚ö†Ô∏è  $failed_tests —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏.${NC}"
    echo -e "${YELLOW}üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.${NC}"
    echo
    exit 1
fi
