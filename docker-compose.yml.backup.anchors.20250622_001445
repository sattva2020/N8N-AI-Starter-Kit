version: '3.8'
services:

  # Общие настройки для всех сервисов
  x-common: &common
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # Общие настройки для AI сервисов
  x-ai-common: &ai-common
    <<: *common
    deploy:
      resources:
        limits:
          memory: 4G

  # Общие настройки для баз данных
  x-db-common: &db-common
    <<: *common
    deploy:
      resources:
        limits:
          memory: 2G

  traefik:
    image: traefik:latest # latest для упрощения поддержки
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.myresolver.acme.tlsChallenge=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      - ./config/traefik:/etc/traefik/dynamic
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USERNAME}:${TRAEFIK_PASSWORD_HASHED}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  n8n:
    <<: *service-n8n
    profiles: [default, cpu, developer]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:latest # latest для упрощения поддержки
    restart: unless-stopped
    profiles: [default, cpu, developer]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  pgadmin:
    image: dpage/pgadmin4:latest # latest для упрощения поддержки
    restart: unless-stopped
    profiles: [developer]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - frontend
      - database
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_DOMAIN}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/pgadmin4/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  minio:
    image: minio/minio:latest # latest для упрощения поддержки
    restart: unless-stopped
    profiles: [default, cpu, developer]
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      # S3 API service
      - "traefik.http.routers.minio-api.rule=Host(`${MINIO_API_DOMAIN}`)"
      - "traefik.http.services.minio-api-service.loadbalancer.server.port=9000"
      - "traefik.http.routers.minio-api.service=minio-api-service"
      # Console service
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_DOMAIN}`)"
      - "traefik.http.services.minio-console-service.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-console.service=minio-console-service"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  qdrant:
    image: qdrant/qdrant:latest # latest для упрощения поддержки
    restart: unless-stopped
    profiles: [default, cpu, developer]
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - backend
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`${QDRANT_DOMAIN}`)"
      - "traefik.http.routers.qdrant.entrypoints=websecure"
      - "traefik.http.routers.qdrant.tls.certresolver=myresolver"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ollama:
  #   <<: *service-ollama
  #   profiles: [default, cpu]
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.ollama.rule=Host(`${OLLAMA_DOMAIN}`)"
  #     - "traefik.http.routers.ollama.entrypoints=websecure"
  #     - "traefik.http.routers.ollama.tls.certresolver=myresolver"
  #     - "traefik.http.services.ollama.loadbalancer.server.port=11434"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '4'
  #         memory: 8G
  #       reservations:
  #         cpus: '2'
  #         memory: 4G

  ollama-pull:
    profiles: [default, cpu]
    <<: *init-ollama
    environment:
      - OLLAMA_HOST=ollama
    depends_on:
      ollama:
        condition: service_healthy
    labels:
      - "traefik.enable=false"

  jupyterlab:
    image: jupyter/minimal-notebook:latest # latest для упрощения поддержки
    restart: unless-stopped
    profiles: [developer]
    volumes:
      - jupyter_data:/home/jovyan/work
    networks:
      - frontend
      - backend
    environment:
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:-}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`${JUPYTER_DOMAIN}`)"
      - "traefik.http.routers.jupyter.entrypoints=websecure"
      - "traefik.http.routers.jupyter.tls.certresolver=myresolver"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

include:
  - path: ./compose/networks.yml
  - path: ./compose/zep-compose.yaml
  - path: ./compose/supabase-compose.yml
  - path: ./compose/ollama-compose.yml
  - path: ./compose/optional-services.yml
