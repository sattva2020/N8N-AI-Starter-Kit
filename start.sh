#!/bin/bash
# filepath: e:\AI\n8n-ai-starter-kit\start.sh
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ N8N AI Starter Kit
# –í–µ—Ä—Å–∏—è: 1.0.6

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ N8N AI Starter Kit ===${NC}"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
detect_optimal_profile() {
    local memory=$(free -m 2>/dev/null | awk 'NR==2{printf "%.0f", $2/1024}' || echo "0")
    local cpu_cores=$(nproc 2>/dev/null || echo "1")
    
    echo -e "${BLUE}–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã:${NC}"
    echo -e "  üìä –ü–∞–º—è—Ç—å: ${memory}GB"
    echo -e "  üñ•Ô∏è  CPU —è–¥–µ—Ä: ${cpu_cores}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
        gpu_info=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1 2>/dev/null || echo "Unknown")
        echo -e "  üéÆ GPU: ${gpu_info}"
        echo -e "${GREEN}üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: gpu-nvidia${NC}"
        echo "gpu-nvidia"
    elif [ "$memory" -gt 16 ] && [ "$cpu_cores" -gt 8 ]; then
        echo -e "${GREEN}üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: developer${NC}"
        echo "developer"
    else
        echo -e "${GREEN}üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: cpu${NC}"
        echo "cpu"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
pre_flight_check() {
    echo -e "${BLUE}–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...${NC}"
    
    local issues=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo -e "  ${RED}‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ Docker –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker compose version &> /dev/null && ! command -v docker-compose &> /dev/null; then
        echo -e "  ${RED}‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if [ ! -f .env ]; then
        echo -e "  ${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        echo -e "  ${YELLOW}   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/setup.sh${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose
    if ! docker compose config &>/dev/null; then
        echo -e "  ${RED}‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
    fi
    
    return $issues
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
auto_fix_issues() {
    echo -e "${YELLOW}–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º...${NC}"
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f ./scripts/fix-env-vars.sh ]; then
        echo -e "  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        chmod +x ./scripts/fix-env-vars.sh
        ./scripts/fix-env-vars.sh
    fi
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if [ -f ./scripts/diagnose.sh ]; then
        echo -e "  üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
        chmod +x ./scripts/diagnose.sh
        ./scripts/diagnose.sh | grep -E "(‚ùå|‚ö†Ô∏è)"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
PROFILE=${1:-$(detect_optimal_profile)}
echo ""
echo -e "${BLUE}–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${YELLOW}$PROFILE${NC}"

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo ""
if ! pre_flight_check; then
    echo -e "${YELLOW}–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...${NC}"
    auto_fix_issues
    
    echo ""
    echo -e "${BLUE}–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...${NC}"
    if ! pre_flight_check; then
        echo -e "${RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.${NC}"
        echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ ./scripts/diagnose.sh –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏${NC}"
        exit 1
    fi
fi

echo ""
echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...${NC}"

# –ó–∞–ø—É—Å–∫ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
echo -e "${BLUE}–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:${NC} COMPOSE_PARALLEL_LIMIT=1 docker compose --profile $PROFILE up -d"
COMPOSE_PARALLEL_LIMIT=1 docker compose --profile $PROFILE up -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
    echo ""
    echo -e "${BLUE}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${YELLOW}./scripts/monitor.sh${NC}"
    echo -e "  üìã –°—Ç–∞—Ç—É—Å: ${YELLOW}docker ps${NC}"
    echo -e "  üìù –õ–æ–≥–∏: ${YELLOW}docker logs n8n-ai-starter-kit-n8n-1${NC}"
    echo -e "  üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${YELLOW}docker compose down${NC}"
    echo ""
    echo -e "${BLUE}–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:${NC}"
    echo -e "  üåê N8N: ${YELLOW}http://localhost:5678${NC}"
    echo -e "  üîç Qdrant: ${YELLOW}http://localhost:6333/dashboard${NC}"
    echo -e "  ü§ñ Ollama: ${YELLOW}http://localhost:11434${NC}"
    echo -e "  üö¶ Traefik: ${YELLOW}http://localhost:8080${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã${NC}"
    echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ./scripts/diagnose.sh${NC}"
    exit 1
fi