#!/bin/bash
# filepath: e:\AI\n8n-ai-starter-kit\start.sh
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ N8N AI Starter Kit
# –í–µ—Ä—Å–∏—è: 1.0.7

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ N8N AI Starter Kit ===${NC}"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
detect_optimal_profile() {
    local memory=$(free -m 2>/dev/null | awk 'NR==2{printf "%.0f", $2/1024}' || echo "0")
    local cpu_cores=$(nproc 2>/dev/null || echo "1")
    
    echo -e "${BLUE}–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã:${NC}"
    echo -e "  üìä –ü–∞–º—è—Ç—å: ${memory}GB"
    echo -e "  üñ•Ô∏è  CPU —è–¥–µ—Ä: ${cpu_cores}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
        gpu_info=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1 2>/dev/null || echo "Unknown")
        echo -e "  üéÆ GPU: ${gpu_info}"
        echo -e "${GREEN}üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: gpu-nvidia${NC}"
        echo "gpu-nvidia"
    elif [ "$memory" -gt 16 ] && [ "$cpu_cores" -gt 8 ]; then
        echo -e "${GREEN}üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: developer${NC}"
        echo "developer"
    else
        echo -e "${GREEN}üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: cpu${NC}"
        echo "cpu"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
pre_flight_check() {
    echo -e "${BLUE}–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...${NC}"
    
    local issues=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo -e "  ${RED}‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ Docker –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker compose version &> /dev/null && ! command -v docker-compose &> /dev/null; then
        echo -e "  ${RED}‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if [ ! -f .env ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env
        if ! grep -q "OPENAI_API_KEY" .env || grep -q "^# OPENAI_API_KEY=" .env; then
            echo -e "  ${YELLOW}‚ö†Ô∏è OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
        else
            echo -e "  ${GREEN}‚úÖ OpenAI API key –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
        fi
        
        if ! grep -q "N8N_ENCRYPTION_KEY" .env; then
            echo -e "  ${YELLOW}‚ö†Ô∏è N8N encryption key –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
            ((issues++))
        else
            echo -e "  ${GREEN}‚úÖ N8N encryption key –Ω–∞–π–¥–µ–Ω${NC}"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ .env
        if grep -q '\$[^{]' .env; then
            echo -e "  ${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã $ –≤ .env${NC}"
            ((issues++))
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose
    if ! docker compose config &>/dev/null; then
        echo -e "  ${RED}‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose${NC}"
        ((issues++))
    else
        echo -e "  ${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
    fi
    
    return $issues
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ setup.sh
run_setup() {
    echo -e "${BLUE}üîß –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...${NC}"
    echo ""
    
    if [ -f "./scripts/setup.sh" ]; then
        chmod +x ./scripts/setup.sh
        echo -e "${CYAN}–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ./scripts/setup.sh...${NC}"
        ./scripts/setup.sh
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
            return 0
        else
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå –§–∞–π–ª ./scripts/setup.sh –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        echo -e "${YELLOW}–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ setup.sh –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scripts/${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
generate_password() {
    local length=${1:-24}
    openssl rand -base64 $length 2>/dev/null | tr -d '=/+' | cut -c1-$length || \
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $length | head -n 1 2>/dev/null || \
    echo "$(date +%s)_$(whoami)_$(hostname)" | sha256sum | cut -c1-$length
}

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º (–±—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
auto_fix_issues() {
    echo -e "${YELLOW}–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if [ ! -f .env ]; then
        echo -e "  üìã –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ .env –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        if [ -f "template.env" ]; then
            cp "template.env" ".env"
            echo -e "  ${GREEN}‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ template.env${NC}"
            
            # –ó–∞–º–µ–Ω–∞ placeholder'–æ–≤ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            echo -e "  üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π..."
            sed -i "s/change_this_secure_password_123/$(generate_password 16)/g" .env 2>/dev/null
            sed -i "s/your_32_char_encryption_key_here_/$(generate_password 32)/g" .env 2>/dev/null
            sed -i "s/your_jwt_secret_key_here_min_32_chars/$(generate_password 32)/g" .env 2>/dev/null
            sed -i "s/supabase_secure_password_123/$(generate_password 16)/g" .env 2>/dev/null
            sed -i "s/your_supabase_jwt_secret_32_chars_min/$(generate_password 32)/g" .env 2>/dev/null
            sed -i "s/minio_secure_password_123/$(generate_password 16)/g" .env 2>/dev/null
            sed -i "s/pgadmin_secure_password_123/$(generate_password 16)/g" .env 2>/dev/null
            sed -i "s/zep_secure_password_123/$(generate_password 16)/g" .env 2>/dev/null
            sed -i "s/your_openai_api_key_here//g" .env 2>/dev/null
            
            echo -e "  ${GREEN}‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã${NC}"
        elif [ -f "scripts/template.env" ]; then
            cp "scripts/template.env" ".env"
            echo -e "  ${GREEN}‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ scripts/template.env${NC}"
        else
            echo -e "  ${RED}‚ùå –®–∞–±–ª–æ–Ω .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
            echo -e "  ${YELLOW}   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É${NC}"
            return 1
        fi
    fi
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f ./scripts/fix-env-vars.sh ]; then
        echo -e "  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        chmod +x ./scripts/fix-env-vars.sh
        ./scripts/fix-env-vars.sh > /dev/null 2>&1
    fi
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Ö—ç—à–µ–º –ø–∞—Ä–æ–ª—è
    if [ -f .env ] && grep -q '\$[^{]' .env; then
        echo -e "  üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è Traefik..."
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã $ –∏–∑ —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è
        sed -i 's/\$\$\$/$/g' .env 2>/dev/null || true
        sed -i 's/\$\$/$/g' .env 2>/dev/null || true
    fi
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if [ -f .env ] && ! grep -q "WEBHOOK_URL" .env; then
        echo -e "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
        echo "WEBHOOK_URL=" >> .env
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
check_critical_components() {
    local critical_issues=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        ((critical_issues++))
    elif ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        ((critical_issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! docker compose version &> /dev/null && ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        ((critical_issues++))
    fi
    
    return $critical_issues
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
PROFILE=${1:-$(detect_optimal_profile)}
echo ""
echo -e "${BLUE}–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${YELLOW}$PROFILE${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
echo ""
if ! check_critical_components; then
    echo ""
    echo -e "${RED}üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Docker/Docker Compose${NC}"
    echo -e "${YELLOW}–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π${NC}"
    echo ""
    echo -e "${CYAN}–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): ${NC}"
    read -r setup_choice
    
    if [[ "$setup_choice" =~ ^[Yy]$ ]]; then
        if ! run_setup; then
            echo -e "${RED}‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫${NC}"
        exit 1
    fi
fi

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo ""
if ! pre_flight_check; then
    echo ""
    echo -e "${YELLOW}–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π${NC}"
    echo ""
    echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo -e "  ${CYAN}1)${NC} –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    echo -e "  ${CYAN}2)${NC} –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo -e "  ${CYAN}3)${NC} –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º)"
    echo ""
    echo -ne "${CYAN}–í–∞—à –≤—ã–±–æ—Ä (1-3): ${NC}"
    read -r fix_choice
    
    case $fix_choice in
        1)
            echo -e "${YELLOW}–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...${NC}"
            if auto_fix_issues; then
                echo ""
                echo -e "${BLUE}–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...${NC}"
                if ! pre_flight_check; then
                    echo -e "${YELLOW}–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.${NC}"
                    echo -e "${CYAN}–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/n): ${NC}"
                    read -r full_setup_choice
                    if [[ "$full_setup_choice" =~ ^[Yy]$ ]]; then
                        if ! run_setup; then
                            echo -e "${RED}‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.${NC}"
                            exit 1
                        fi
                    else
                        echo -e "${YELLOW}–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...${NC}"
                    fi
                fi
            else
                echo -e "${YELLOW}–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...${NC}"
                if ! run_setup; then
                    echo -e "${RED}‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.${NC}"
                    exit 1
                fi
            fi
            ;;
        2)
            if ! run_setup; then
                echo -e "${RED}‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.${NC}"
                exit 1
            fi
            ;;
        3)
            echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.${NC}"
            ;;
        *)
            echo -e "${YELLOW}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...${NC}"
            if ! run_setup; then
                echo -e "${RED}‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.${NC}"
                exit 1
            fi
            ;;
    esac
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    echo ""
    echo -e "${BLUE}–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
    if ! pre_flight_check; then
        echo -e "${RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.${NC}"
        echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ ./scripts/diagnose.sh –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏${NC}"
        exit 1
    fi
fi

echo ""
echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...${NC}"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã Docker Compose
if docker compose version &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker compose"
elif command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
else
    DOCKER_COMPOSE_CMD="docker compose"
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${BLUE}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
$DOCKER_COMPOSE_CMD down > /dev/null 2>&1

# –ó–∞–ø—É—Å–∫ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
echo -e "${BLUE}–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞:${NC} COMPOSE_PARALLEL_LIMIT=1 $DOCKER_COMPOSE_CMD --profile $PROFILE up -d"
COMPOSE_PARALLEL_LIMIT=1 $DOCKER_COMPOSE_CMD --profile $PROFILE up -d

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
    echo ""
    echo -e "${BLUE}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${YELLOW}./scripts/monitor.sh${NC}"
    echo -e "  üìã –°—Ç–∞—Ç—É—Å: ${YELLOW}docker ps${NC}"
    echo -e "  üìù –õ–æ–≥–∏: ${YELLOW}docker logs n8n-ai-starter-kit-n8n-1${NC}"
    echo -e "  üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${YELLOW}$DOCKER_COMPOSE_CMD down${NC}"
    echo ""
    echo -e "${BLUE}–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:${NC}"
    echo -e "  üåê N8N: ${YELLOW}http://localhost:5678${NC}"
    echo -e "  üîç Qdrant: ${YELLOW}http://localhost:6333/dashboard${NC}"
    echo -e "  ü§ñ Ollama: ${YELLOW}http://localhost:11434${NC}"
    echo -e "  üö¶ Traefik: ${YELLOW}http://localhost:8080${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API Key
    if [ -f .env ] && (grep -q "^# OPENAI_API_KEY=" .env || ! grep -q "OPENAI_API_KEY=" .env); then
        echo ""
        echo -e "${YELLOW}üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
        echo -e "   ${CYAN}–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI –º–æ–¥–µ–ª–µ–π –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª .env${NC}"
        echo -e "   ${CYAN}–∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/setup.sh –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏${NC}"
    fi
else
    echo ""
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã${NC}"
    echo -e "${YELLOW}–ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ./scripts/diagnose.sh${NC}"
    echo -e "${YELLOW}–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É: ./scripts/setup.sh${NC}"
    exit 1
fi